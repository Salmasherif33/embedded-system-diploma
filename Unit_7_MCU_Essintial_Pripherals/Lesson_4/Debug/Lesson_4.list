
Lesson_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d98  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000ec8  08000ec8  00010ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ef0  08000ef0  00010ef8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ef0  08000ef0  00010ef8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ef0  08000ef8  00010ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ef0  08000ef0  00010ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ef4  08000ef4  00010ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000ef8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000ef8  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ef8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003322  00000000  00000000  00010f21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000860  00000000  00000000  00014243  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000095c  00000000  00000000  00014aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000198  00000000  00000000  00015400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000150  00000000  00000000  00015598  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000099a  00000000  00000000  000156e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001bff  00000000  00000000  00016082  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000956c  00000000  00000000  00017c81  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000211ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004fc  00000000  00000000  00021268  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000eb0 	.word	0x08000eb0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000eb0 	.word	0x08000eb0

08000170 <Enable_NVIC>:
 * =============================================================================================
 */


void Enable_NVIC(uint16_t IL)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch(IL)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b0f      	cmp	r3, #15
 800017e:	d854      	bhi.n	800022a <Enable_NVIC+0xba>
 8000180:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <Enable_NVIC+0x18>)
 8000182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000186:	bf00      	nop
 8000188:	080001c9 	.word	0x080001c9
 800018c:	080001d7 	.word	0x080001d7
 8000190:	080001e5 	.word	0x080001e5
 8000194:	080001f3 	.word	0x080001f3
 8000198:	08000201 	.word	0x08000201
 800019c:	0800020f 	.word	0x0800020f
 80001a0:	0800020f 	.word	0x0800020f
 80001a4:	0800020f 	.word	0x0800020f
 80001a8:	0800020f 	.word	0x0800020f
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	0800021d 	.word	0x0800021d
 80001b4:	0800021d 	.word	0x0800021d
 80001b8:	0800021d 	.word	0x0800021d
 80001bc:	0800021d 	.word	0x0800021d
 80001c0:	0800021d 	.word	0x0800021d
 80001c4:	0800021d 	.word	0x0800021d
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80001c8:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <Enable_NVIC+0xc4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a19      	ldr	r2, [pc, #100]	; (8000234 <Enable_NVIC+0xc4>)
 80001ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d2:	6013      	str	r3, [r2, #0]
		break;
 80001d4:	e029      	b.n	800022a <Enable_NVIC+0xba>

	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <Enable_NVIC+0xc4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a16      	ldr	r2, [pc, #88]	; (8000234 <Enable_NVIC+0xc4>)
 80001dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001e0:	6013      	str	r3, [r2, #0]
		break;
 80001e2:	e022      	b.n	800022a <Enable_NVIC+0xba>

	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <Enable_NVIC+0xc4>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <Enable_NVIC+0xc4>)
 80001ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ee:	6013      	str	r3, [r2, #0]
		break;
 80001f0:	e01b      	b.n	800022a <Enable_NVIC+0xba>

	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <Enable_NVIC+0xc4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <Enable_NVIC+0xc4>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
		break;
 80001fe:	e014      	b.n	800022a <Enable_NVIC+0xba>

	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <Enable_NVIC+0xc4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <Enable_NVIC+0xc4>)
 8000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020a:	6013      	str	r3, [r2, #0]
		break;
 800020c:	e00d      	b.n	800022a <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <Enable_NVIC+0xc4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a08      	ldr	r2, [pc, #32]	; (8000234 <Enable_NVIC+0xc4>)
 8000214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000218:	6013      	str	r3, [r2, #0]
		break;
 800021a:	e006      	b.n	800022a <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <Enable_NVIC+0xc8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a05      	ldr	r2, [pc, #20]	; (8000238 <Enable_NVIC+0xc8>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000226:	6013      	str	r3, [r2, #0]
		break;
 8000228:	bf00      	nop
	}
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000e104 	.word	0xe000e104

0800023c <Disable_NVIC>:


void Disable_NVIC(uint16_t IL)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	80fb      	strh	r3, [r7, #6]
	switch(IL)
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d854      	bhi.n	80002f6 <Disable_NVIC+0xba>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <Disable_NVIC+0x18>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	08000295 	.word	0x08000295
 8000258:	080002a3 	.word	0x080002a3
 800025c:	080002b1 	.word	0x080002b1
 8000260:	080002bf 	.word	0x080002bf
 8000264:	080002cd 	.word	0x080002cd
 8000268:	080002db 	.word	0x080002db
 800026c:	080002db 	.word	0x080002db
 8000270:	080002db 	.word	0x080002db
 8000274:	080002db 	.word	0x080002db
 8000278:	080002db 	.word	0x080002db
 800027c:	080002e9 	.word	0x080002e9
 8000280:	080002e9 	.word	0x080002e9
 8000284:	080002e9 	.word	0x080002e9
 8000288:	080002e9 	.word	0x080002e9
 800028c:	080002e9 	.word	0x080002e9
 8000290:	080002e9 	.word	0x080002e9
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <Disable_NVIC+0xc4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a19      	ldr	r2, [pc, #100]	; (8000300 <Disable_NVIC+0xc4>)
 800029a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029e:	6013      	str	r3, [r2, #0]
		break;
 80002a0:	e029      	b.n	80002f6 <Disable_NVIC+0xba>

	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <Disable_NVIC+0xc4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <Disable_NVIC+0xc4>)
 80002a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ac:	6013      	str	r3, [r2, #0]
		break;
 80002ae:	e022      	b.n	80002f6 <Disable_NVIC+0xba>

	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <Disable_NVIC+0xc4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <Disable_NVIC+0xc4>)
 80002b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ba:	6013      	str	r3, [r2, #0]
		break;
 80002bc:	e01b      	b.n	80002f6 <Disable_NVIC+0xba>

	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <Disable_NVIC+0xc4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <Disable_NVIC+0xc4>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6013      	str	r3, [r2, #0]
		break;
 80002ca:	e014      	b.n	80002f6 <Disable_NVIC+0xba>

	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <Disable_NVIC+0xc4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <Disable_NVIC+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	6013      	str	r3, [r2, #0]
		break;
 80002d8:	e00d      	b.n	80002f6 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <Disable_NVIC+0xc4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a08      	ldr	r2, [pc, #32]	; (8000300 <Disable_NVIC+0xc4>)
 80002e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002e4:	6013      	str	r3, [r2, #0]
		break;
 80002e6:	e006      	b.n	80002f6 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <Disable_NVIC+0xc8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <Disable_NVIC+0xc8>)
 80002ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f2:	6013      	str	r3, [r2, #0]
		break;
 80002f4:	bf00      	nop
	}
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	e000e180 	.word	0xe000e180
 8000304:	e000e184 	.word	0xe000e184

08000308 <Update_EXTI>:
 * Note			-TM32f103c6 MCU has GPIO A,B,B,D,E modules
                 but LQFP48 Package has only A,B, Part of C,D
                -Also mandatory to enable RCC clock for AFIO and the corresponding GPIO
 */
void Update_EXTI( EXTI_PinConfig_t* EXTI_Config)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	//1 configure GPIO to be AF input->floating input
	GPIO_PinConfig_t pinConfig;
	pinConfig.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	891b      	ldrh	r3, [r3, #8]
 8000314:	813b      	strh	r3, [r7, #8]
	pinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000316:	2301      	movs	r3, #1
 8000318:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &pinConfig);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	f107 0208 	add.w	r2, r7, #8
 8000322:	4611      	mov	r1, r2
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fa5e 	bl	80007e6 <MCAL_GPIO_Init>

	//2 UPDATE AFIO to route between EXTI Line with PORT A,B,C,D

	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	089b      	lsrs	r3, r3, #2
 8000330:	b29b      	uxth	r3, r3
 8000332:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_position = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4) * 4;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	f003 0303 	and.w	r3, r3, #3
 800033e:	b2db      	uxtb	r3, r3
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	73bb      	strb	r3, [r7, #14]

	//clear then set the 4 bits
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_position);
 8000344:	4a61      	ldr	r2, [pc, #388]	; (80004cc <Update_EXTI+0x1c4>)
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	3302      	adds	r3, #2
 800034a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034e:	7bbb      	ldrb	r3, [r7, #14]
 8000350:	210f      	movs	r1, #15
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	43db      	mvns	r3, r3
 8000358:	4618      	mov	r0, r3
 800035a:	495c      	ldr	r1, [pc, #368]	; (80004cc <Update_EXTI+0x1c4>)
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	4002      	ands	r2, r0
 8000360:	3302      	adds	r3, #2
 8000362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_EXTI_GPIO_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) & 0xF) << AFIO_EXTICR_position );
 8000366:	4a59      	ldr	r2, [pc, #356]	; (80004cc <Update_EXTI+0x1c4>)
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	3302      	adds	r3, #2
 800036c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4956      	ldr	r1, [pc, #344]	; (80004d0 <Update_EXTI+0x1c8>)
 8000376:	428b      	cmp	r3, r1
 8000378:	d016      	beq.n	80003a8 <Update_EXTI+0xa0>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	4955      	ldr	r1, [pc, #340]	; (80004d4 <Update_EXTI+0x1cc>)
 8000380:	428b      	cmp	r3, r1
 8000382:	d00f      	beq.n	80003a4 <Update_EXTI+0x9c>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	4953      	ldr	r1, [pc, #332]	; (80004d8 <Update_EXTI+0x1d0>)
 800038a:	428b      	cmp	r3, r1
 800038c:	d008      	beq.n	80003a0 <Update_EXTI+0x98>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	4952      	ldr	r1, [pc, #328]	; (80004dc <Update_EXTI+0x1d4>)
 8000394:	428b      	cmp	r3, r1
 8000396:	d101      	bne.n	800039c <Update_EXTI+0x94>
 8000398:	2303      	movs	r3, #3
 800039a:	e006      	b.n	80003aa <Update_EXTI+0xa2>
 800039c:	2300      	movs	r3, #0
 800039e:	e004      	b.n	80003aa <Update_EXTI+0xa2>
 80003a0:	2302      	movs	r3, #2
 80003a2:	e002      	b.n	80003aa <Update_EXTI+0xa2>
 80003a4:	2301      	movs	r3, #1
 80003a6:	e000      	b.n	80003aa <Update_EXTI+0xa2>
 80003a8:	2300      	movs	r3, #0
 80003aa:	7bb9      	ldrb	r1, [r7, #14]
 80003ac:	408b      	lsls	r3, r1
 80003ae:	4618      	mov	r0, r3
 80003b0:	4946      	ldr	r1, [pc, #280]	; (80004cc <Update_EXTI+0x1c4>)
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	4302      	orrs	r2, r0
 80003b6:	3302      	adds	r3, #2
 80003b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//3 update falling and rising edge
	//clear then set their registers
	EXTI->RTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003bc:	4b48      	ldr	r3, [pc, #288]	; (80004e0 <Update_EXTI+0x1d8>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	8812      	ldrh	r2, [r2, #0]
 80003c4:	4611      	mov	r1, r2
 80003c6:	2201      	movs	r2, #1
 80003c8:	408a      	lsls	r2, r1
 80003ca:	43d2      	mvns	r2, r2
 80003cc:	4611      	mov	r1, r2
 80003ce:	4a44      	ldr	r2, [pc, #272]	; (80004e0 <Update_EXTI+0x1d8>)
 80003d0:	400b      	ands	r3, r1
 80003d2:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003d4:	4b42      	ldr	r3, [pc, #264]	; (80004e0 <Update_EXTI+0x1d8>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	8812      	ldrh	r2, [r2, #0]
 80003dc:	4611      	mov	r1, r2
 80003de:	2201      	movs	r2, #1
 80003e0:	408a      	lsls	r2, r1
 80003e2:	43d2      	mvns	r2, r2
 80003e4:	4611      	mov	r1, r2
 80003e6:	4a3e      	ldr	r2, [pc, #248]	; (80004e0 <Update_EXTI+0x1d8>)
 80003e8:	400b      	ands	r3, r1
 80003ea:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_case ==EXTI_Trigger_RISING)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	7b1b      	ldrb	r3, [r3, #12]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10b      	bne.n	800040c <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003f4:	4b3a      	ldr	r3, [pc, #232]	; (80004e0 <Update_EXTI+0x1d8>)
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	8812      	ldrh	r2, [r2, #0]
 80003fc:	4611      	mov	r1, r2
 80003fe:	2201      	movs	r2, #1
 8000400:	408a      	lsls	r2, r1
 8000402:	4611      	mov	r1, r2
 8000404:	4a36      	ldr	r2, [pc, #216]	; (80004e0 <Update_EXTI+0x1d8>)
 8000406:	430b      	orrs	r3, r1
 8000408:	6093      	str	r3, [r2, #8]
 800040a:	e029      	b.n	8000460 <Update_EXTI+0x158>

	}
	else if(EXTI_Config->Trigger_case ==EXTI_Trigger_FALLING)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	7b1b      	ldrb	r3, [r3, #12]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d10b      	bne.n	800042c <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000414:	4b32      	ldr	r3, [pc, #200]	; (80004e0 <Update_EXTI+0x1d8>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	8812      	ldrh	r2, [r2, #0]
 800041c:	4611      	mov	r1, r2
 800041e:	2201      	movs	r2, #1
 8000420:	408a      	lsls	r2, r1
 8000422:	4611      	mov	r1, r2
 8000424:	4a2e      	ldr	r2, [pc, #184]	; (80004e0 <Update_EXTI+0x1d8>)
 8000426:	430b      	orrs	r3, r1
 8000428:	60d3      	str	r3, [r2, #12]
 800042a:	e019      	b.n	8000460 <Update_EXTI+0x158>

	}
	else if(EXTI_Config->Trigger_case ==EXTI_Trigger_BOTH)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	7b1b      	ldrb	r3, [r3, #12]
 8000430:	2b02      	cmp	r3, #2
 8000432:	d115      	bne.n	8000460 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000434:	4b2a      	ldr	r3, [pc, #168]	; (80004e0 <Update_EXTI+0x1d8>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	8812      	ldrh	r2, [r2, #0]
 800043c:	4611      	mov	r1, r2
 800043e:	2201      	movs	r2, #1
 8000440:	408a      	lsls	r2, r1
 8000442:	4611      	mov	r1, r2
 8000444:	4a26      	ldr	r2, [pc, #152]	; (80004e0 <Update_EXTI+0x1d8>)
 8000446:	430b      	orrs	r3, r1
 8000448:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800044a:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <Update_EXTI+0x1d8>)
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	8812      	ldrh	r2, [r2, #0]
 8000452:	4611      	mov	r1, r2
 8000454:	2201      	movs	r2, #1
 8000456:	408a      	lsls	r2, r1
 8000458:	4611      	mov	r1, r2
 800045a:	4a21      	ldr	r2, [pc, #132]	; (80004e0 <Update_EXTI+0x1d8>)
 800045c:	430b      	orrs	r3, r1
 800045e:	60d3      	str	r3, [r2, #12]

	}

	//4 Update IRQ Handling CALLBACK
	GP_IRQ_callBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->p_IRQ_callBack;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	4619      	mov	r1, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	691b      	ldr	r3, [r3, #16]
 800046a:	4a1e      	ldr	r2, [pc, #120]	; (80004e4 <Update_EXTI+0x1dc>)
 800046c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//5 enable/disable IRQ & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	7b5b      	ldrb	r3, [r3, #13]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d110      	bne.n	800049a <Update_EXTI+0x192>
	{
		//enable interrupt mask register
		EXTI->IMR |= 1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber;
 8000478:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <Update_EXTI+0x1d8>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	8812      	ldrh	r2, [r2, #0]
 8000480:	4611      	mov	r1, r2
 8000482:	2201      	movs	r2, #1
 8000484:	408a      	lsls	r2, r1
 8000486:	4611      	mov	r1, r2
 8000488:	4a15      	ldr	r2, [pc, #84]	; (80004e0 <Update_EXTI+0x1d8>)
 800048a:	430b      	orrs	r3, r1
 800048c:	6013      	str	r3, [r2, #0]

		//enable NVIC
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff fe6c 	bl	8000170 <Enable_NVIC>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);

		//disable NVIC
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}
}
 8000498:	e014      	b.n	80004c4 <Update_EXTI+0x1bc>
	else if(EXTI_Config->IRQ_EN == EXTI_IRQ_DISABLE)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	7b5b      	ldrb	r3, [r3, #13]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d110      	bne.n	80004c4 <Update_EXTI+0x1bc>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <Update_EXTI+0x1d8>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	8812      	ldrh	r2, [r2, #0]
 80004aa:	4611      	mov	r1, r2
 80004ac:	2201      	movs	r2, #1
 80004ae:	408a      	lsls	r2, r1
 80004b0:	43d2      	mvns	r2, r2
 80004b2:	4611      	mov	r1, r2
 80004b4:	4a0a      	ldr	r2, [pc, #40]	; (80004e0 <Update_EXTI+0x1d8>)
 80004b6:	400b      	ands	r3, r1
 80004b8:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	881b      	ldrh	r3, [r3, #0]
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff febc 	bl	800023c <Disable_NVIC>
}
 80004c4:	bf00      	nop
 80004c6:	3710      	adds	r7, #16
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40010000 	.word	0x40010000
 80004d0:	40010800 	.word	0x40010800
 80004d4:	40010c00 	.word	0x40010c00
 80004d8:	40011000 	.word	0x40011000
 80004dc:	40011400 	.word	0x40011400
 80004e0:	40010400 	.word	0x40010400
 80004e4:	2000001c 	.word	0x2000001c

080004e8 <MCAL_EXTI_Init>:
                -Also mandatory to enable RCC clock for AFIO and the corresponding GPIO
 */


void MCAL_EXTI_Init(EXTI_PinConfig_t* EXTI_Config)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f7ff ff09 	bl	8000308 <Update_EXTI>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <EXTI0_IRQHandler>:
 * 									ISR Functions
 * =============================================================================================
 */

void EXTI0_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	//clear pending flag
	EXTI->PR |= 1<<0;
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <EXTI0_IRQHandler+0x1c>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	4a04      	ldr	r2, [pc, #16]	; (800051c <EXTI0_IRQHandler+0x1c>)
 800050a:	f043 0301 	orr.w	r3, r3, #1
 800050e:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[0]();
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <EXTI0_IRQHandler+0x20>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4798      	blx	r3
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40010400 	.word	0x40010400
 8000520:	2000001c 	.word	0x2000001c

08000524 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <EXTI1_IRQHandler+0x1c>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <EXTI1_IRQHandler+0x1c>)
 800052e:	f043 0302 	orr.w	r3, r3, #2
 8000532:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[1]();
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <EXTI1_IRQHandler+0x20>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	4798      	blx	r3
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40010400 	.word	0x40010400
 8000544:	2000001c 	.word	0x2000001c

08000548 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <EXTI2_IRQHandler+0x1c>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <EXTI2_IRQHandler+0x1c>)
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[2]();
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <EXTI2_IRQHandler+0x20>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	4798      	blx	r3
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40010400 	.word	0x40010400
 8000568:	2000001c 	.word	0x2000001c

0800056c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <EXTI3_IRQHandler+0x1c>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <EXTI3_IRQHandler+0x1c>)
 8000576:	f043 0308 	orr.w	r3, r3, #8
 800057a:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[3]();
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <EXTI3_IRQHandler+0x20>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	4798      	blx	r3

}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40010400 	.word	0x40010400
 800058c:	2000001c 	.word	0x2000001c

08000590 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <EXTI4_IRQHandler+0x1c>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <EXTI4_IRQHandler+0x1c>)
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[4]();
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <EXTI4_IRQHandler+0x20>)
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	4798      	blx	r3
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40010400 	.word	0x40010400
 80005b0:	2000001c 	.word	0x2000001c

080005b4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= 1<<5; GP_IRQ_callBack[5]();}
 80005b8:	4b26      	ldr	r3, [pc, #152]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	f003 0320 	and.w	r3, r3, #32
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d008      	beq.n	80005d6 <EXTI9_5_IRQHandler+0x22>
 80005c4:	4b23      	ldr	r3, [pc, #140]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	4a22      	ldr	r2, [pc, #136]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 80005ca:	f043 0320 	orr.w	r3, r3, #32
 80005ce:	6153      	str	r3, [r2, #20]
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <EXTI9_5_IRQHandler+0xa4>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= 1<<6; GP_IRQ_callBack[6]();}
 80005d6:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d008      	beq.n	80005f4 <EXTI9_5_IRQHandler+0x40>
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 80005e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ec:	6153      	str	r3, [r2, #20]
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <EXTI9_5_IRQHandler+0xa4>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= 1<<7; GP_IRQ_callBack[7]();}
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d008      	beq.n	8000612 <EXTI9_5_IRQHandler+0x5e>
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a13      	ldr	r2, [pc, #76]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 8000606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060a:	6153      	str	r3, [r2, #20]
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <EXTI9_5_IRQHandler+0xa4>)
 800060e:	69db      	ldr	r3, [r3, #28]
 8000610:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= 1<<8; GP_IRQ_callBack[8]();}
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800061a:	2b00      	cmp	r3, #0
 800061c:	d008      	beq.n	8000630 <EXTI9_5_IRQHandler+0x7c>
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 8000624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <EXTI9_5_IRQHandler+0xa4>)
 800062c:	6a1b      	ldr	r3, [r3, #32]
 800062e:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= 1<<9; GP_IRQ_callBack[9]();}
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000638:	2b00      	cmp	r3, #0
 800063a:	d008      	beq.n	800064e <EXTI9_5_IRQHandler+0x9a>
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 8000642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000646:	6153      	str	r3, [r2, #20]
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <EXTI9_5_IRQHandler+0xa4>)
 800064a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064c:	4798      	blx	r3

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40010400 	.word	0x40010400
 8000658:	2000001c 	.word	0x2000001c

0800065c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= 1<<10; GP_IRQ_callBack[10]();}
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000668:	2b00      	cmp	r3, #0
 800066a:	d008      	beq.n	800067e <EXTI15_10_IRQHandler+0x22>
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4a29      	ldr	r2, [pc, #164]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 8000672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000676:	6153      	str	r3, [r2, #20]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <EXTI15_10_IRQHandler+0xc0>)
 800067a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800067c:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= 1<<11; GP_IRQ_callBack[11]();}
 800067e:	4b26      	ldr	r3, [pc, #152]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000686:	2b00      	cmp	r3, #0
 8000688:	d008      	beq.n	800069c <EXTI15_10_IRQHandler+0x40>
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a22      	ldr	r2, [pc, #136]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 8000690:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000694:	6153      	str	r3, [r2, #20]
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <EXTI15_10_IRQHandler+0xc0>)
 8000698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069a:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= 1<<12; GP_IRQ_callBack[12]();}
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d008      	beq.n	80006ba <EXTI15_10_IRQHandler+0x5e>
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	4a1a      	ldr	r2, [pc, #104]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006b2:	6153      	str	r3, [r2, #20]
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <EXTI15_10_IRQHandler+0xc0>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= 1<<13; GP_IRQ_callBack[13]();}
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d008      	beq.n	80006d8 <EXTI15_10_IRQHandler+0x7c>
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006d0:	6153      	str	r3, [r2, #20]
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <EXTI15_10_IRQHandler+0xc0>)
 80006d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006d6:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= 1<<14; GP_IRQ_callBack[14]();}
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d008      	beq.n	80006f6 <EXTI15_10_IRQHandler+0x9a>
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ee:	6153      	str	r3, [r2, #20]
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <EXTI15_10_IRQHandler+0xc0>)
 80006f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006f4:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= 1<<15; GP_IRQ_callBack[15]();}
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d008      	beq.n	8000714 <EXTI15_10_IRQHandler+0xb8>
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4a04      	ldr	r2, [pc, #16]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 8000708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800070c:	6153      	str	r3, [r2, #20]
 800070e:	4b03      	ldr	r3, [pc, #12]	; (800071c <EXTI15_10_IRQHandler+0xc0>)
 8000710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000712:	4798      	blx	r3

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40010400 	.word	0x40010400
 800071c:	2000001c 	.word	0x2000001c

08000720 <GET_CRLH_Position>:
 * Note			-STM32f103c6 MCU has GPIO A,B,B,D,E modules
                 but LQFP48 Package has only A,B, Part of C,D
 */

uint8_t GET_CRLH_Position(uint16_t PinNumber)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	2b80      	cmp	r3, #128	; 0x80
 800072e:	d042      	beq.n	80007b6 <GET_CRLH_Position+0x96>
 8000730:	2b80      	cmp	r3, #128	; 0x80
 8000732:	dc11      	bgt.n	8000758 <GET_CRLH_Position+0x38>
 8000734:	2b08      	cmp	r3, #8
 8000736:	d036      	beq.n	80007a6 <GET_CRLH_Position+0x86>
 8000738:	2b08      	cmp	r3, #8
 800073a:	dc06      	bgt.n	800074a <GET_CRLH_Position+0x2a>
 800073c:	2b02      	cmp	r3, #2
 800073e:	d02e      	beq.n	800079e <GET_CRLH_Position+0x7e>
 8000740:	2b04      	cmp	r3, #4
 8000742:	d02e      	beq.n	80007a2 <GET_CRLH_Position+0x82>
 8000744:	2b01      	cmp	r3, #1
 8000746:	d028      	beq.n	800079a <GET_CRLH_Position+0x7a>
 8000748:	e047      	b.n	80007da <GET_CRLH_Position+0xba>
 800074a:	2b20      	cmp	r3, #32
 800074c:	d02f      	beq.n	80007ae <GET_CRLH_Position+0x8e>
 800074e:	2b40      	cmp	r3, #64	; 0x40
 8000750:	d02f      	beq.n	80007b2 <GET_CRLH_Position+0x92>
 8000752:	2b10      	cmp	r3, #16
 8000754:	d029      	beq.n	80007aa <GET_CRLH_Position+0x8a>
 8000756:	e040      	b.n	80007da <GET_CRLH_Position+0xba>
 8000758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800075c:	d033      	beq.n	80007c6 <GET_CRLH_Position+0xa6>
 800075e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000762:	dc09      	bgt.n	8000778 <GET_CRLH_Position+0x58>
 8000764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000768:	d029      	beq.n	80007be <GET_CRLH_Position+0x9e>
 800076a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800076e:	d028      	beq.n	80007c2 <GET_CRLH_Position+0xa2>
 8000770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000774:	d021      	beq.n	80007ba <GET_CRLH_Position+0x9a>
 8000776:	e030      	b.n	80007da <GET_CRLH_Position+0xba>
 8000778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800077c:	d027      	beq.n	80007ce <GET_CRLH_Position+0xae>
 800077e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000782:	dc03      	bgt.n	800078c <GET_CRLH_Position+0x6c>
 8000784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000788:	d01f      	beq.n	80007ca <GET_CRLH_Position+0xaa>
 800078a:	e026      	b.n	80007da <GET_CRLH_Position+0xba>
 800078c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000790:	d01f      	beq.n	80007d2 <GET_CRLH_Position+0xb2>
 8000792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000796:	d01e      	beq.n	80007d6 <GET_CRLH_Position+0xb6>
 8000798:	e01f      	b.n	80007da <GET_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 800079a:	2300      	movs	r3, #0
 800079c:	e01e      	b.n	80007dc <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 800079e:	2304      	movs	r3, #4
 80007a0:	e01c      	b.n	80007dc <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 80007a2:	2308      	movs	r3, #8
 80007a4:	e01a      	b.n	80007dc <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 80007a6:	230c      	movs	r3, #12
 80007a8:	e018      	b.n	80007dc <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 80007aa:	2310      	movs	r3, #16
 80007ac:	e016      	b.n	80007dc <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 80007ae:	2314      	movs	r3, #20
 80007b0:	e014      	b.n	80007dc <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 80007b2:	2318      	movs	r3, #24
 80007b4:	e012      	b.n	80007dc <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 80007b6:	231c      	movs	r3, #28
 80007b8:	e010      	b.n	80007dc <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e00e      	b.n	80007dc <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 80007be:	2304      	movs	r3, #4
 80007c0:	e00c      	b.n	80007dc <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 80007c2:	2308      	movs	r3, #8
 80007c4:	e00a      	b.n	80007dc <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 80007c6:	230c      	movs	r3, #12
 80007c8:	e008      	b.n	80007dc <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 80007ca:	2310      	movs	r3, #16
 80007cc:	e006      	b.n	80007dc <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 80007ce:	2314      	movs	r3, #20
 80007d0:	e004      	b.n	80007dc <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 80007d2:	2318      	movs	r3, #24
 80007d4:	e002      	b.n	80007dc <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 80007d6:	231c      	movs	r3, #28
 80007d8:	e000      	b.n	80007dc <GET_CRLH_Position+0xbc>
		break;
	}

	return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <MCAL_GPIO_Init>:


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b084      	sub	sp, #16
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	6039      	str	r1, [r7, #0]
	volatile uint32_t *ConfigRegister = NULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
	uint32_t Pin = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL: &GPIOx->CRH;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	2bff      	cmp	r3, #255	; 0xff
 80007fe:	d801      	bhi.n	8000804 <MCAL_GPIO_Init+0x1e>
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	e001      	b.n	8000808 <MCAL_GPIO_Init+0x22>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3304      	adds	r3, #4
 8000808:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0], MODE[1:0]
	(*ConfigRegister) &= ~(0x0F << GET_CRLH_Position(PinConfig->GPIO_PinNumber));
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff86 	bl	8000720 <GET_CRLH_Position>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	230f      	movs	r3, #15
 800081a:	4093      	lsls	r3, r2
 800081c:	43da      	mvns	r2, r3
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	401a      	ands	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	789b      	ldrb	r3, [r3, #2]
 800082c:	2b07      	cmp	r3, #7
 800082e:	d00b      	beq.n	8000848 <MCAL_GPIO_Init+0x62>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	789b      	ldrb	r3, [r3, #2]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d007      	beq.n	8000848 <MCAL_GPIO_Init+0x62>
			|| PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUPUT_PP)
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	789b      	ldrb	r3, [r3, #2]
 800083c:	2b05      	cmp	r3, #5
 800083e:	d003      	beq.n	8000848 <MCAL_GPIO_Init+0x62>
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	789b      	ldrb	r3, [r3, #2]
 8000844:	2b04      	cmp	r3, #4
 8000846:	d10a      	bne.n	800085e <MCAL_GPIO_Init+0x78>
	{
		Pin = (( ( (PinConfig->GPIO_MODE - 4) << 2 ) | (PinConfig->GPIO_output_speed) ) &0x0F );
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	789b      	ldrb	r3, [r3, #2]
 800084c:	3b04      	subs	r3, #4
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	683a      	ldr	r2, [r7, #0]
 8000852:	78d2      	ldrb	r2, [r2, #3]
 8000854:	4313      	orrs	r3, r2
 8000856:	f003 030f 	and.w	r3, r3, #15
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	e02f      	b.n	80008be <MCAL_GPIO_Init+0xd8>
	}
	//input, Reset value for MODE
	else {
		if( PinConfig->GPIO_MODE == GPIO_MODE_ANALOG || PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO )
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	789b      	ldrb	r3, [r3, #2]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d003      	beq.n	800086e <MCAL_GPIO_Init+0x88>
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	789b      	ldrb	r3, [r3, #2]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d106      	bne.n	800087c <MCAL_GPIO_Init+0x96>
		{
			//set CNF, MODE
			Pin = ((PinConfig->GPIO_MODE << 2) | 0x0) & (0x0F);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	789b      	ldrb	r3, [r3, #2]
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	f003 030f 	and.w	r3, r3, #15
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	e020      	b.n	80008be <MCAL_GPIO_Init+0xd8>
		}
		else if( PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)	//as input floating
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	789b      	ldrb	r3, [r3, #2]
 8000880:	2b08      	cmp	r3, #8
 8000882:	d102      	bne.n	800088a <MCAL_GPIO_Init+0xa4>
		{
			Pin = (GPIO_MODE_INPUT_FLO << 2 ) & (0x0F);
 8000884:	2304      	movs	r3, #4
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	e019      	b.n	80008be <MCAL_GPIO_Init+0xd8>
		}
		else{ //pull up, or pull down

			Pin = (PinConfig->GPIO_MODE << 2) & (0x0F);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	789b      	ldrb	r3, [r3, #2]
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	f003 030f 	and.w	r3, r3, #15
 8000894:	60fb      	str	r3, [r7, #12]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	789b      	ldrb	r3, [r3, #2]
 800089a:	2b02      	cmp	r3, #2
 800089c:	d107      	bne.n	80008ae <MCAL_GPIO_Init+0xc8>
			{
				GPIOx->ODR  |= (PinConfig->GPIO_PinNumber);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	8812      	ldrh	r2, [r2, #0]
 80008a6:	431a      	orrs	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	e007      	b.n	80008be <MCAL_GPIO_Init+0xd8>
			}
			else
			{
				GPIOx->ODR  &= ~(PinConfig->GPIO_PinNumber);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	683a      	ldr	r2, [r7, #0]
 80008b4:	8812      	ldrh	r2, [r2, #0]
 80008b6:	43d2      	mvns	r2, r2
 80008b8:	401a      	ands	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	60da      	str	r2, [r3, #12]
			}
		}
	}

	//write on the CRL or CRH
	*(ConfigRegister) |= ((Pin) << GET_CRLH_Position(PinConfig->GPIO_PinNumber));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff2c 	bl	8000720 <GET_CRLH_Position>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461a      	mov	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	fa03 f202 	lsl.w	r2, r3, r2
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	431a      	orrs	r2, r3
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	601a      	str	r2, [r3, #0]
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <MCAL_GPIO_ReadPort>:
 * @retval	 	-The input port value
 * Note			-none
 */

uint16_t MCAL_GPIO_ReadPort(GPIO_TypeDef* GPIOx)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	uint16_t portStatus;
	portStatus = (uint16_t)(GPIOx->IDR);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	81fb      	strh	r3, [r7, #14]
	return portStatus;
 80008f2:	89fb      	ldrh	r3, [r7, #14]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <MCAL_GPIO_WritePin>:
 * @retval	 	-none
 * Note			-none
 */

void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOx,uint16_t PinNumber,uint8_t Value)
{
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	460b      	mov	r3, r1
 8000908:	807b      	strh	r3, [r7, #2]
 800090a:	4613      	mov	r3, r2
 800090c:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_PIN_RESET)
 800090e:	787b      	ldrb	r3, [r7, #1]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d003      	beq.n	800091c <MCAL_GPIO_WritePin+0x1e>
	/*	Bits 31:16 BRy: Port x Reset bit y (y= 0 .. 15)
		These bits are write-only and can be accessed in Word mode only.
		0: No action on the corresponding ODRx bit
		1: Reset the corresponding ODRx bit
		Note: If both BSx and BRx are set, BSx has priorit	*/
	GPIOx->BSRR = (uint32_t)PinNumber;
 8000914:	887a      	ldrh	r2, [r7, #2]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	611a      	str	r2, [r3, #16]
		These bits are write-only and can be accessed in Word mode only.
		0: No action on the corresponding ODRx bit
		1: Reset the corresponding ODRx bit */
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 800091a:	e002      	b.n	8000922 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 800091c:	887a      	ldrh	r2, [r7, #2]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	615a      	str	r2, [r3, #20]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <MCAL_GPIO_WritePort>:
 * @retval	 	-none
 * Note			-none
 */

void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOx,uint16_t Value)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 8000938:	887a      	ldrh	r2, [r7, #2]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	60da      	str	r2, [r3, #12]

}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <delay_ms>:
 *  Author: Marco
 */

#include "lcd.h"
GPIO_PinConfig_t PinCfg ;
void delay_ms(uint32_t time) {
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	e00b      	b.n	800096e <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	e002      	b.n	8000962 <delay_ms+0x1a>
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	3301      	adds	r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	2bfe      	cmp	r3, #254	; 0xfe
 8000966:	d9f9      	bls.n	800095c <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	3301      	adds	r3, #1
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	429a      	cmp	r2, r3
 8000974:	d3ef      	bcc.n	8000956 <delay_ms+0xe>
			;
}
 8000976:	bf00      	nop
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <LCD_clear_screen>:



void LCD_clear_screen() {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000984:	2001      	movs	r0, #1
 8000986:	f000 f967 	bl	8000c58 <LCD_WRITE_COMMAND>
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <LCD_KICK>:

void LCD_KICK() {
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099a:	4808      	ldr	r0, [pc, #32]	; (80009bc <LCD_KICK+0x2c>)
 800099c:	f7ff ffaf 	bl	80008fe <MCAL_GPIO_WritePin>
	asm volatile ("nop");
 80009a0:	bf00      	nop
	asm volatile ("nop");
 80009a2:	bf00      	nop
	delay_ms(50);
 80009a4:	2032      	movs	r0, #50	; 0x32
 80009a6:	f7ff ffcf 	bl	8000948 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <LCD_KICK+0x2c>)
 80009b2:	f7ff ffa4 	bl	80008fe <MCAL_GPIO_WritePin>
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40010800 	.word	0x40010800

080009c0 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	460a      	mov	r2, r1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	4613      	mov	r3, r2
 80009ce:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d108      	bne.n	80009e8 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 80009d6:	79bb      	ldrb	r3, [r7, #6]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d805      	bhi.n	80009e8 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	3b80      	subs	r3, #128	; 0x80
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f938 	bl	8000c58 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d108      	bne.n	8000a00 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 80009ee:	79bb      	ldrb	r3, [r7, #6]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d805      	bhi.n	8000a00 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	3b40      	subs	r3, #64	; 0x40
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f92c 	bl	8000c58 <LCD_WRITE_COMMAND>
		}
	}
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <LCD_INIT>:

void LCD_INIT() {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0

	delay_ms(20);
 8000a0c:	2014      	movs	r0, #20
 8000a0e:	f7ff ff9b 	bl	8000948 <delay_ms>


	// SET THE FIRST 3 PINS AS OUPUT

	PinCfg.GPIO_PinNumber = RS_SWITCH;
 8000a12:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <LCD_INIT+0x9c>)
 8000a14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a18:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000a1a:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <LCD_INIT+0x9c>)
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000a20:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <LCD_INIT+0x9c>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000a26:	491f      	ldr	r1, [pc, #124]	; (8000aa4 <LCD_INIT+0x9c>)
 8000a28:	481f      	ldr	r0, [pc, #124]	; (8000aa8 <LCD_INIT+0xa0>)
 8000a2a:	f7ff fedc 	bl	80007e6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <LCD_INIT+0x9c>)
 8000a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a34:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <LCD_INIT+0x9c>)
 8000a38:	2204      	movs	r2, #4
 8000a3a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <LCD_INIT+0x9c>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000a42:	4918      	ldr	r1, [pc, #96]	; (8000aa4 <LCD_INIT+0x9c>)
 8000a44:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <LCD_INIT+0xa0>)
 8000a46:	f7ff fece 	bl	80007e6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <LCD_INIT+0x9c>)
 8000a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a50:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <LCD_INIT+0x9c>)
 8000a54:	2204      	movs	r2, #4
 8000a56:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <LCD_INIT+0x9c>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000a5e:	4911      	ldr	r1, [pc, #68]	; (8000aa4 <LCD_INIT+0x9c>)
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <LCD_INIT+0xa0>)
 8000a62:	f7ff fec0 	bl	80007e6 <MCAL_GPIO_Init>

	LCD_IS_BUSY();
 8000a66:	f000 f821 	bl	8000aac <LCD_IS_BUSY>
	//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 8000a6a:	200f      	movs	r0, #15
 8000a6c:	f7ff ff6c 	bl	8000948 <delay_ms>

	LCD_clear_screen();
 8000a70:	f7ff ff86 	bl	8000980 <LCD_clear_screen>
	delay_ms(50);
 8000a74:	2032      	movs	r0, #50	; 0x32
 8000a76:	f7ff ff67 	bl	8000948 <delay_ms>

#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000a7a:	2038      	movs	r0, #56	; 0x38
 8000a7c:	f000 f8ec 	bl	8000c58 <LCD_WRITE_COMMAND>
	delay_ms(1);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f7ff ff61 	bl	8000948 <delay_ms>
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	_delay_us(50);
	#endif*/

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000a86:	2006      	movs	r0, #6
 8000a88:	f000 f8e6 	bl	8000c58 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000a8c:	2080      	movs	r0, #128	; 0x80
 8000a8e:	f000 f8e3 	bl	8000c58 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000a92:	200f      	movs	r0, #15
 8000a94:	f000 f8e0 	bl	8000c58 <LCD_WRITE_COMMAND>
	delay_ms(1);
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f7ff ff55 	bl	8000948 <delay_ms>
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000058 	.word	0x20000058
 8000aa8:	40010800 	.word	0x40010800

08000aac <LCD_IS_BUSY>:

void LCD_IS_BUSY() {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	//DataDir_LCD_PORT &= ~(0xFF << DATA_SHIFT);
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000ab0:	4b67      	ldr	r3, [pc, #412]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000ab6:	4b66      	ldr	r3, [pc, #408]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000abc:	4964      	ldr	r1, [pc, #400]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000abe:	4865      	ldr	r0, [pc, #404]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000ac0:	f7ff fe91 	bl	80007e6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000ac4:	4b62      	ldr	r3, [pc, #392]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000aca:	4b61      	ldr	r3, [pc, #388]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000ad0:	495f      	ldr	r1, [pc, #380]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000ad2:	4860      	ldr	r0, [pc, #384]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000ad4:	f7ff fe87 	bl	80007e6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000ad8:	4b5d      	ldr	r3, [pc, #372]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000ada:	2204      	movs	r2, #4
 8000adc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000ade:	4b5c      	ldr	r3, [pc, #368]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000ae4:	495a      	ldr	r1, [pc, #360]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000ae6:	485b      	ldr	r0, [pc, #364]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000ae8:	f7ff fe7d 	bl	80007e6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000aec:	4b58      	ldr	r3, [pc, #352]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000aee:	2208      	movs	r2, #8
 8000af0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000af2:	4b57      	ldr	r3, [pc, #348]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000af8:	4955      	ldr	r1, [pc, #340]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000afa:	4856      	ldr	r0, [pc, #344]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000afc:	f7ff fe73 	bl	80007e6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000b00:	4b53      	ldr	r3, [pc, #332]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b02:	2210      	movs	r2, #16
 8000b04:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000b06:	4b52      	ldr	r3, [pc, #328]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000b0c:	4950      	ldr	r1, [pc, #320]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b0e:	4851      	ldr	r0, [pc, #324]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000b10:	f7ff fe69 	bl	80007e6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000b14:	4b4e      	ldr	r3, [pc, #312]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b16:	2220      	movs	r2, #32
 8000b18:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000b1a:	4b4d      	ldr	r3, [pc, #308]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000b20:	494b      	ldr	r1, [pc, #300]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b22:	484c      	ldr	r0, [pc, #304]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000b24:	f7ff fe5f 	bl	80007e6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000b28:	4b49      	ldr	r3, [pc, #292]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b2a:	2240      	movs	r2, #64	; 0x40
 8000b2c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000b2e:	4b48      	ldr	r3, [pc, #288]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000b34:	4946      	ldr	r1, [pc, #280]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b36:	4847      	ldr	r0, [pc, #284]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000b38:	f7ff fe55 	bl	80007e6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000b3c:	4b44      	ldr	r3, [pc, #272]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b3e:	2280      	movs	r2, #128	; 0x80
 8000b40:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000b42:	4b43      	ldr	r3, [pc, #268]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000b48:	4941      	ldr	r1, [pc, #260]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b4a:	4842      	ldr	r0, [pc, #264]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000b4c:	f7ff fe4b 	bl	80007e6 <MCAL_GPIO_Init>

	//	LCD_CTRL |= (1 << RW_SWITCH);
	//	LCD_CTRL &= ~(1 << RS_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b56:	483f      	ldr	r0, [pc, #252]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000b58:	f7ff fed1 	bl	80008fe <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b62:	483c      	ldr	r0, [pc, #240]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000b64:	f7ff fecb 	bl	80008fe <MCAL_GPIO_WritePin>

	while((MCAL_GPIO_ReadPort(LCD_CTRL) & ((uint16_t)(0x80)) ) << 7 == 1)	//pin 7 on => is busy
 8000b68:	bf00      	nop
 8000b6a:	483a      	ldr	r0, [pc, #232]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000b6c:	f7ff feba 	bl	80008e4 <MCAL_GPIO_ReadPort>
		LCD_KICK();

	//	DataDir_LCD_PORT |= (0xFF << DATA_shift);
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000b70:	4b37      	ldr	r3, [pc, #220]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000b76:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b78:	2204      	movs	r2, #4
 8000b7a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000b7c:	4b34      	ldr	r3, [pc, #208]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000b82:	4933      	ldr	r1, [pc, #204]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b84:	4833      	ldr	r0, [pc, #204]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000b86:	f7ff fe2e 	bl	80007e6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000b8a:	4b31      	ldr	r3, [pc, #196]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000b90:	4b2f      	ldr	r3, [pc, #188]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b92:	2204      	movs	r2, #4
 8000b94:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000b96:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000b9c:	492c      	ldr	r1, [pc, #176]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000b9e:	482d      	ldr	r0, [pc, #180]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000ba0:	f7ff fe21 	bl	80007e6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000baa:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000bac:	2204      	movs	r2, #4
 8000bae:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000bb6:	4926      	ldr	r1, [pc, #152]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000bb8:	4826      	ldr	r0, [pc, #152]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000bba:	f7ff fe14 	bl	80007e6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000bbe:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000bc0:	2208      	movs	r2, #8
 8000bc2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000bd0:	491f      	ldr	r1, [pc, #124]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000bd2:	4820      	ldr	r0, [pc, #128]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000bd4:	f7ff fe07 	bl	80007e6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000bda:	2210      	movs	r2, #16
 8000bdc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000be0:	2204      	movs	r2, #4
 8000be2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000bea:	4919      	ldr	r1, [pc, #100]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000bec:	4819      	ldr	r0, [pc, #100]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000bee:	f7ff fdfa 	bl	80007e6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000bf4:	2220      	movs	r2, #32
 8000bf6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000c04:	4912      	ldr	r1, [pc, #72]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000c06:	4813      	ldr	r0, [pc, #76]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000c08:	f7ff fded 	bl	80007e6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000c0e:	2240      	movs	r2, #64	; 0x40
 8000c10:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000c14:	2204      	movs	r2, #4
 8000c16:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000c1e:	490c      	ldr	r1, [pc, #48]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000c22:	f7ff fde0 	bl	80007e6 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000c2e:	2204      	movs	r2, #4
 8000c30:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000c38:	4905      	ldr	r1, [pc, #20]	; (8000c50 <LCD_IS_BUSY+0x1a4>)
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000c3c:	f7ff fdd3 	bl	80007e6 <MCAL_GPIO_Init>

	//	LCD_CTRL &= ~(1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c46:	4803      	ldr	r0, [pc, #12]	; (8000c54 <LCD_IS_BUSY+0x1a8>)
 8000c48:	f7ff fe59 	bl	80008fe <MCAL_GPIO_WritePin>


}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000058 	.word	0x20000058
 8000c54:	40010800 	.word	0x40010800

08000c58 <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND(unsigned char command) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	//LCD_IS_BUSY();
#ifdef EIGHT_BIT_MODE
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4619      	mov	r1, r3
 8000c68:	480b      	ldr	r0, [pc, #44]	; (8000c98 <LCD_WRITE_COMMAND+0x40>)
 8000c6a:	f7ff fe5f 	bl	800092c <MCAL_GPIO_WritePort>
	//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
	//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
	//	LCD_CTRL->CRL = command;
	//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c74:	4808      	ldr	r0, [pc, #32]	; (8000c98 <LCD_WRITE_COMMAND+0x40>)
 8000c76:	f7ff fe42 	bl	80008fe <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <LCD_WRITE_COMMAND+0x40>)
 8000c82:	f7ff fe3c 	bl	80008fe <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff fe5e 	bl	8000948 <delay_ms>
	LCD_KICK();
 8000c8c:	f7ff fe80 	bl	8000990 <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (command << DATA_SHIFT);
	LCD_CTRL &= ~((1<<RW_SWITCH | 1<<RS_SWITCH));	//r/w off(write mode), (RS)Command mode
	LCD_KICK();	//flash the above info to lcd
	_delay_ms(1);
#endif*/
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40010800 	.word	0x40010800

08000c9c <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
	//LCD_IS_BUSY();
	//	LCD_CTRL->CRL = character;
#ifdef EIGHT_BIT_MODE
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	4619      	mov	r1, r3
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <LCD_WRITE_CHAR+0x40>)
 8000cae:	f7ff fe3d 	bl	800092c <MCAL_GPIO_WritePort>
	//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb8:	4808      	ldr	r0, [pc, #32]	; (8000cdc <LCD_WRITE_CHAR+0x40>)
 8000cba:	f7ff fe20 	bl	80008fe <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <LCD_WRITE_CHAR+0x40>)
 8000cc6:	f7ff fe1a 	bl	80008fe <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~(1 << RW_SWITCH);
	//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f7ff fe3c 	bl	8000948 <delay_ms>
	LCD_KICK();
 8000cd0:	f7ff fe5e 	bl	8000990 <LCD_KICK>
	LCD_CTRL |= 1<<RS_SWITCH;		//data mode
	LCD_KICK();	//flash the above info to lcd
	_delay_ms(1);
#endif*/

}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40010800 	.word	0x40010800

08000ce0 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000cec:	e01c      	b.n	8000d28 <LCD_WRITE_STRING+0x48>
		count++;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	607a      	str	r2, [r7, #4]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ffcd 	bl	8000c9c <LCD_WRITE_CHAR>
		if (count == 16) {
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2b10      	cmp	r3, #16
 8000d06:	d104      	bne.n	8000d12 <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f7ff fe58 	bl	80009c0 <LCD_GOTO_XY>
 8000d10:	e00a      	b.n	8000d28 <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2b20      	cmp	r3, #32
 8000d16:	d107      	bne.n	8000d28 <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 8000d18:	f7ff fe32 	bl	8000980 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f7ff fe4e 	bl	80009c0 <LCD_GOTO_XY>
			count = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1de      	bne.n	8000cee <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <my_wait>:


unsigned int IRQ_flag;

void my_wait(uint32_t time)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	int i,j;
	for(i = 0; i< time; i++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	e00b      	b.n	8000d5e <my_wait+0x26>
		for(j = 0; j<255; j++);
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	e002      	b.n	8000d52 <my_wait+0x1a>
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	2bfe      	cmp	r3, #254	; 0xfe
 8000d56:	ddf9      	ble.n	8000d4c <my_wait+0x14>
	for(i = 0; i< time; i++)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d8ef      	bhi.n	8000d46 <my_wait+0xe>
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <EXTI9_callback>:


void EXTI9_callback(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	LCD_clear_screen();
 8000d74:	f7ff fe04 	bl	8000980 <LCD_clear_screen>
	IRQ_flag = 1;
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <EXTI9_callback+0x20>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI9 is happened _|-");
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <EXTI9_callback+0x24>)
 8000d80:	f7ff ffae 	bl	8000ce0 <LCD_WRITE_STRING>
	my_wait(1000);
 8000d84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d88:	f7ff ffd6 	bl	8000d38 <my_wait>
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000005c 	.word	0x2000005c
 8000d94:	08000ec8 	.word	0x08000ec8

08000d98 <main>:

int main(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <main+0x6c>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4a18      	ldr	r2, [pc, #96]	; (8000e04 <main+0x6c>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <main+0x6c>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <main+0x6c>)
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <main+0x6c>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <main+0x6c>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6193      	str	r3, [r2, #24]



	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 8000dc2:	4a11      	ldr	r2, [pc, #68]	; (8000e08 <main+0x70>)
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_case = EXTI_Trigger_RISING;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.p_IRQ_callBack = EXTI9_callback;
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <main+0x74>)
 8000dd2:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_ENABLE;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_Init(&EXTI_CFG);
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fb84 	bl	80004e8 <MCAL_EXTI_Init>

	LCD_INIT();
 8000de0:	f7ff fe12 	bl	8000a08 <LCD_INIT>
	LCD_clear_screen();
 8000de4:	f7ff fdcc 	bl	8000980 <LCD_clear_screen>

	IRQ_flag = 1;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <main+0x78>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]
	/* Loop forever */
	while(1)
	{
		if(IRQ_flag)
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <main+0x78>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0fb      	beq.n	8000dee <main+0x56>
		{
			LCD_clear_screen();
 8000df6:	f7ff fdc3 	bl	8000980 <LCD_clear_screen>
			IRQ_flag = 0;
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <main+0x78>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
		if(IRQ_flag)
 8000e00:	e7f5      	b.n	8000dee <main+0x56>
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000
 8000e08:	08000ee4 	.word	0x08000ee4
 8000e0c:	08000d71 	.word	0x08000d71
 8000e10:	2000005c 	.word	0x2000005c

08000e14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e16:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e18:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e1e:	490d      	ldr	r1, [pc, #52]	; (8000e54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <LoopForever+0xe>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e34:	4c0a      	ldr	r4, [pc, #40]	; (8000e60 <LoopForever+0x16>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e42:	f000 f811 	bl	8000e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e46:	f7ff ffa7 	bl	8000d98 <main>

08000e4a <LoopForever>:

LoopForever:
    b LoopForever
 8000e4a:	e7fe      	b.n	8000e4a <LoopForever>
  ldr   r0, =_estack
 8000e4c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e58:	08000ef8 	.word	0x08000ef8
  ldr r2, =_sbss
 8000e5c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e60:	20000060 	.word	0x20000060

08000e64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC1_2_IRQHandler>
	...

08000e68 <__libc_init_array>:
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	2500      	movs	r5, #0
 8000e6c:	4e0c      	ldr	r6, [pc, #48]	; (8000ea0 <__libc_init_array+0x38>)
 8000e6e:	4c0d      	ldr	r4, [pc, #52]	; (8000ea4 <__libc_init_array+0x3c>)
 8000e70:	1ba4      	subs	r4, r4, r6
 8000e72:	10a4      	asrs	r4, r4, #2
 8000e74:	42a5      	cmp	r5, r4
 8000e76:	d109      	bne.n	8000e8c <__libc_init_array+0x24>
 8000e78:	f000 f81a 	bl	8000eb0 <_init>
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	4e0a      	ldr	r6, [pc, #40]	; (8000ea8 <__libc_init_array+0x40>)
 8000e80:	4c0a      	ldr	r4, [pc, #40]	; (8000eac <__libc_init_array+0x44>)
 8000e82:	1ba4      	subs	r4, r4, r6
 8000e84:	10a4      	asrs	r4, r4, #2
 8000e86:	42a5      	cmp	r5, r4
 8000e88:	d105      	bne.n	8000e96 <__libc_init_array+0x2e>
 8000e8a:	bd70      	pop	{r4, r5, r6, pc}
 8000e8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e90:	4798      	blx	r3
 8000e92:	3501      	adds	r5, #1
 8000e94:	e7ee      	b.n	8000e74 <__libc_init_array+0xc>
 8000e96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e9a:	4798      	blx	r3
 8000e9c:	3501      	adds	r5, #1
 8000e9e:	e7f2      	b.n	8000e86 <__libc_init_array+0x1e>
 8000ea0:	08000ef0 	.word	0x08000ef0
 8000ea4:	08000ef0 	.word	0x08000ef0
 8000ea8:	08000ef0 	.word	0x08000ef0
 8000eac:	08000ef4 	.word	0x08000ef4

08000eb0 <_init>:
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	bf00      	nop
 8000eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb6:	bc08      	pop	{r3}
 8000eb8:	469e      	mov	lr, r3
 8000eba:	4770      	bx	lr

08000ebc <_fini>:
 8000ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ebe:	bf00      	nop
 8000ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec2:	bc08      	pop	{r3}
 8000ec4:	469e      	mov	lr, r3
 8000ec6:	4770      	bx	lr
