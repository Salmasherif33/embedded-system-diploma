
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bb4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000ce4  08000ce4  00010ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d0c  08000d0c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000d0c  08000d0c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d0c  08000d0c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d0c  08000d0c  00010d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d10  08000d10  00010d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000020  08000d34  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000d34  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a79  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000939  00000000  00000000  00023ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006fc  00000000  00000000  000243fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000160  00000000  00000000  00024af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000108  00000000  00000000  00024c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000021ba  00000000  00000000  00024d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000210c  00000000  00000000  00026f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007c76  00000000  00000000  00029026  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00030c9c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003cc  00000000  00000000  00030d18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ccc 	.word	0x08000ccc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000ccc 	.word	0x08000ccc

08000170 <SEG_INIT>:

#include "7_segment.h"

GPIO_PinConfig_t pinConfig;

void SEG_INIT(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	pinConfig.GPIO_PinNumber = GPIO_PIN_9;
 8000174:	4b31      	ldr	r3, [pc, #196]	; (800023c <SEG_INIT+0xcc>)
 8000176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800017a:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 800017c:	4b2f      	ldr	r3, [pc, #188]	; (800023c <SEG_INIT+0xcc>)
 800017e:	2204      	movs	r2, #4
 8000180:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000182:	4b2e      	ldr	r3, [pc, #184]	; (800023c <SEG_INIT+0xcc>)
 8000184:	2201      	movs	r2, #1
 8000186:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &pinConfig);
 8000188:	492c      	ldr	r1, [pc, #176]	; (800023c <SEG_INIT+0xcc>)
 800018a:	482d      	ldr	r0, [pc, #180]	; (8000240 <SEG_INIT+0xd0>)
 800018c:	f000 f8bd 	bl	800030a <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000190:	4b2a      	ldr	r3, [pc, #168]	; (800023c <SEG_INIT+0xcc>)
 8000192:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000196:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000198:	4b28      	ldr	r3, [pc, #160]	; (800023c <SEG_INIT+0xcc>)
 800019a:	2204      	movs	r2, #4
 800019c:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 800019e:	4b27      	ldr	r3, [pc, #156]	; (800023c <SEG_INIT+0xcc>)
 80001a0:	2201      	movs	r2, #1
 80001a2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &pinConfig);
 80001a4:	4925      	ldr	r1, [pc, #148]	; (800023c <SEG_INIT+0xcc>)
 80001a6:	4826      	ldr	r0, [pc, #152]	; (8000240 <SEG_INIT+0xd0>)
 80001a8:	f000 f8af 	bl	800030a <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_11;
 80001ac:	4b23      	ldr	r3, [pc, #140]	; (800023c <SEG_INIT+0xcc>)
 80001ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80001b2:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 80001b4:	4b21      	ldr	r3, [pc, #132]	; (800023c <SEG_INIT+0xcc>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 80001ba:	4b20      	ldr	r3, [pc, #128]	; (800023c <SEG_INIT+0xcc>)
 80001bc:	2201      	movs	r2, #1
 80001be:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &pinConfig);
 80001c0:	491e      	ldr	r1, [pc, #120]	; (800023c <SEG_INIT+0xcc>)
 80001c2:	481f      	ldr	r0, [pc, #124]	; (8000240 <SEG_INIT+0xd0>)
 80001c4:	f000 f8a1 	bl	800030a <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_12;
 80001c8:	4b1c      	ldr	r3, [pc, #112]	; (800023c <SEG_INIT+0xcc>)
 80001ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001ce:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 80001d0:	4b1a      	ldr	r3, [pc, #104]	; (800023c <SEG_INIT+0xcc>)
 80001d2:	2204      	movs	r2, #4
 80001d4:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 80001d6:	4b19      	ldr	r3, [pc, #100]	; (800023c <SEG_INIT+0xcc>)
 80001d8:	2201      	movs	r2, #1
 80001da:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &pinConfig);
 80001dc:	4917      	ldr	r1, [pc, #92]	; (800023c <SEG_INIT+0xcc>)
 80001de:	4818      	ldr	r0, [pc, #96]	; (8000240 <SEG_INIT+0xd0>)
 80001e0:	f000 f893 	bl	800030a <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80001e4:	4b15      	ldr	r3, [pc, #84]	; (800023c <SEG_INIT+0xcc>)
 80001e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80001ea:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 80001ec:	4b13      	ldr	r3, [pc, #76]	; (800023c <SEG_INIT+0xcc>)
 80001ee:	2204      	movs	r2, #4
 80001f0:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 80001f2:	4b12      	ldr	r3, [pc, #72]	; (800023c <SEG_INIT+0xcc>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &pinConfig);
 80001f8:	4910      	ldr	r1, [pc, #64]	; (800023c <SEG_INIT+0xcc>)
 80001fa:	4811      	ldr	r0, [pc, #68]	; (8000240 <SEG_INIT+0xd0>)
 80001fc:	f000 f885 	bl	800030a <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_14;
 8000200:	4b0e      	ldr	r3, [pc, #56]	; (800023c <SEG_INIT+0xcc>)
 8000202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000206:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <SEG_INIT+0xcc>)
 800020a:	2204      	movs	r2, #4
 800020c:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <SEG_INIT+0xcc>)
 8000210:	2201      	movs	r2, #1
 8000212:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &pinConfig);
 8000214:	4909      	ldr	r1, [pc, #36]	; (800023c <SEG_INIT+0xcc>)
 8000216:	480a      	ldr	r0, [pc, #40]	; (8000240 <SEG_INIT+0xd0>)
 8000218:	f000 f877 	bl	800030a <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = GPIO_PIN_15;
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <SEG_INIT+0xcc>)
 800021e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000222:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <SEG_INIT+0xcc>)
 8000226:	2204      	movs	r2, #4
 8000228:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <SEG_INIT+0xcc>)
 800022c:	2201      	movs	r2, #1
 800022e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, &pinConfig);
 8000230:	4902      	ldr	r1, [pc, #8]	; (800023c <SEG_INIT+0xcc>)
 8000232:	4803      	ldr	r0, [pc, #12]	; (8000240 <SEG_INIT+0xd0>)
 8000234:	f000 f869 	bl	800030a <MCAL_GPIO_Init>
}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}
 800023c:	2000003c 	.word	0x2000003c
 8000240:	40010c00 	.word	0x40010c00

08000244 <GET_CRLH_Position>:
 * Note			-STM32f103c6 MCU has GPIO A,B,B,D,E modules
                 but LQFP48 Package has only A,B, Part of C,D
 */

uint8_t GET_CRLH_Position(uint16_t PinNumber)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800024e:	88fb      	ldrh	r3, [r7, #6]
 8000250:	2b80      	cmp	r3, #128	; 0x80
 8000252:	d042      	beq.n	80002da <GET_CRLH_Position+0x96>
 8000254:	2b80      	cmp	r3, #128	; 0x80
 8000256:	dc11      	bgt.n	800027c <GET_CRLH_Position+0x38>
 8000258:	2b08      	cmp	r3, #8
 800025a:	d036      	beq.n	80002ca <GET_CRLH_Position+0x86>
 800025c:	2b08      	cmp	r3, #8
 800025e:	dc06      	bgt.n	800026e <GET_CRLH_Position+0x2a>
 8000260:	2b02      	cmp	r3, #2
 8000262:	d02e      	beq.n	80002c2 <GET_CRLH_Position+0x7e>
 8000264:	2b04      	cmp	r3, #4
 8000266:	d02e      	beq.n	80002c6 <GET_CRLH_Position+0x82>
 8000268:	2b01      	cmp	r3, #1
 800026a:	d028      	beq.n	80002be <GET_CRLH_Position+0x7a>
 800026c:	e047      	b.n	80002fe <GET_CRLH_Position+0xba>
 800026e:	2b20      	cmp	r3, #32
 8000270:	d02f      	beq.n	80002d2 <GET_CRLH_Position+0x8e>
 8000272:	2b40      	cmp	r3, #64	; 0x40
 8000274:	d02f      	beq.n	80002d6 <GET_CRLH_Position+0x92>
 8000276:	2b10      	cmp	r3, #16
 8000278:	d029      	beq.n	80002ce <GET_CRLH_Position+0x8a>
 800027a:	e040      	b.n	80002fe <GET_CRLH_Position+0xba>
 800027c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000280:	d033      	beq.n	80002ea <GET_CRLH_Position+0xa6>
 8000282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000286:	dc09      	bgt.n	800029c <GET_CRLH_Position+0x58>
 8000288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800028c:	d029      	beq.n	80002e2 <GET_CRLH_Position+0x9e>
 800028e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000292:	d028      	beq.n	80002e6 <GET_CRLH_Position+0xa2>
 8000294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000298:	d021      	beq.n	80002de <GET_CRLH_Position+0x9a>
 800029a:	e030      	b.n	80002fe <GET_CRLH_Position+0xba>
 800029c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80002a0:	d027      	beq.n	80002f2 <GET_CRLH_Position+0xae>
 80002a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80002a6:	dc03      	bgt.n	80002b0 <GET_CRLH_Position+0x6c>
 80002a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002ac:	d01f      	beq.n	80002ee <GET_CRLH_Position+0xaa>
 80002ae:	e026      	b.n	80002fe <GET_CRLH_Position+0xba>
 80002b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80002b4:	d01f      	beq.n	80002f6 <GET_CRLH_Position+0xb2>
 80002b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80002ba:	d01e      	beq.n	80002fa <GET_CRLH_Position+0xb6>
 80002bc:	e01f      	b.n	80002fe <GET_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	e01e      	b.n	8000300 <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 80002c2:	2304      	movs	r3, #4
 80002c4:	e01c      	b.n	8000300 <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 80002c6:	2308      	movs	r3, #8
 80002c8:	e01a      	b.n	8000300 <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 80002ca:	230c      	movs	r3, #12
 80002cc:	e018      	b.n	8000300 <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 80002ce:	2310      	movs	r3, #16
 80002d0:	e016      	b.n	8000300 <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 80002d2:	2314      	movs	r3, #20
 80002d4:	e014      	b.n	8000300 <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 80002d6:	2318      	movs	r3, #24
 80002d8:	e012      	b.n	8000300 <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 80002da:	231c      	movs	r3, #28
 80002dc:	e010      	b.n	8000300 <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	e00e      	b.n	8000300 <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 80002e2:	2304      	movs	r3, #4
 80002e4:	e00c      	b.n	8000300 <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 80002e6:	2308      	movs	r3, #8
 80002e8:	e00a      	b.n	8000300 <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 80002ea:	230c      	movs	r3, #12
 80002ec:	e008      	b.n	8000300 <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 80002ee:	2310      	movs	r3, #16
 80002f0:	e006      	b.n	8000300 <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 80002f2:	2314      	movs	r3, #20
 80002f4:	e004      	b.n	8000300 <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 80002f6:	2318      	movs	r3, #24
 80002f8:	e002      	b.n	8000300 <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 80002fa:	231c      	movs	r3, #28
 80002fc:	e000      	b.n	8000300 <GET_CRLH_Position+0xbc>
		break;
	}

	return 0;
 80002fe:	2300      	movs	r3, #0
}
 8000300:	4618      	mov	r0, r3
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr

0800030a <MCAL_GPIO_Init>:


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	b084      	sub	sp, #16
 800030e:	af00      	add	r7, sp, #0
 8000310:	6078      	str	r0, [r7, #4]
 8000312:	6039      	str	r1, [r7, #0]
	volatile uint32_t *ConfigRegister = NULL;
 8000314:	2300      	movs	r3, #0
 8000316:	60bb      	str	r3, [r7, #8]
	uint32_t Pin = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL: &GPIOx->CRH;
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	881b      	ldrh	r3, [r3, #0]
 8000320:	2bff      	cmp	r3, #255	; 0xff
 8000322:	d801      	bhi.n	8000328 <MCAL_GPIO_Init+0x1e>
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	e001      	b.n	800032c <MCAL_GPIO_Init+0x22>
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	3304      	adds	r3, #4
 800032c:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0], MODE[1:0]
	(*ConfigRegister) &= ~(0x0F << GET_CRLH_Position(PinConfig->GPIO_PinNumber));
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	881b      	ldrh	r3, [r3, #0]
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff86 	bl	8000244 <GET_CRLH_Position>
 8000338:	4603      	mov	r3, r0
 800033a:	461a      	mov	r2, r3
 800033c:	230f      	movs	r3, #15
 800033e:	4093      	lsls	r3, r2
 8000340:	43da      	mvns	r2, r3
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	401a      	ands	r2, r3
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	789b      	ldrb	r3, [r3, #2]
 8000350:	2b07      	cmp	r3, #7
 8000352:	d00b      	beq.n	800036c <MCAL_GPIO_Init+0x62>
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	789b      	ldrb	r3, [r3, #2]
 8000358:	2b06      	cmp	r3, #6
 800035a:	d007      	beq.n	800036c <MCAL_GPIO_Init+0x62>
			|| PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUPUT_PP)
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	789b      	ldrb	r3, [r3, #2]
 8000360:	2b05      	cmp	r3, #5
 8000362:	d003      	beq.n	800036c <MCAL_GPIO_Init+0x62>
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	789b      	ldrb	r3, [r3, #2]
 8000368:	2b04      	cmp	r3, #4
 800036a:	d10a      	bne.n	8000382 <MCAL_GPIO_Init+0x78>
	{
		Pin = (( ( (PinConfig->GPIO_MODE - 4) << 2 ) | (PinConfig->GPIO_output_speed) ) &0x0F );
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	789b      	ldrb	r3, [r3, #2]
 8000370:	3b04      	subs	r3, #4
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	683a      	ldr	r2, [r7, #0]
 8000376:	78d2      	ldrb	r2, [r2, #3]
 8000378:	4313      	orrs	r3, r2
 800037a:	f003 030f 	and.w	r3, r3, #15
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	e02f      	b.n	80003e2 <MCAL_GPIO_Init+0xd8>
	}
	//input, Reset value for MODE
	else {
		if( PinConfig->GPIO_MODE == GPIO_MODE_ANALOG || PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO )
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	789b      	ldrb	r3, [r3, #2]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d003      	beq.n	8000392 <MCAL_GPIO_Init+0x88>
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	789b      	ldrb	r3, [r3, #2]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d106      	bne.n	80003a0 <MCAL_GPIO_Init+0x96>
		{
			//set CNF, MODE
			Pin = (PinConfig->GPIO_MODE << 2) & (0x0F);
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	789b      	ldrb	r3, [r3, #2]
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	f003 030f 	and.w	r3, r3, #15
 800039c:	60fb      	str	r3, [r7, #12]
 800039e:	e020      	b.n	80003e2 <MCAL_GPIO_Init+0xd8>
		}
		else if( PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)	//as input floating
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	789b      	ldrb	r3, [r3, #2]
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d102      	bne.n	80003ae <MCAL_GPIO_Init+0xa4>
		{
			Pin = (GPIO_MODE_INPUT_FLO << 2 ) & (0x0F);
 80003a8:	2304      	movs	r3, #4
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	e019      	b.n	80003e2 <MCAL_GPIO_Init+0xd8>
		}
		else{ //pull up, or pull down

			Pin = (PinConfig->GPIO_MODE << 2) & (0x0F);
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	789b      	ldrb	r3, [r3, #2]
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	60fb      	str	r3, [r7, #12]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	789b      	ldrb	r3, [r3, #2]
 80003be:	2b02      	cmp	r3, #2
 80003c0:	d107      	bne.n	80003d2 <MCAL_GPIO_Init+0xc8>
			{
				GPIOx->ODR  |= (PinConfig->GPIO_PinNumber);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	68db      	ldr	r3, [r3, #12]
 80003c6:	683a      	ldr	r2, [r7, #0]
 80003c8:	8812      	ldrh	r2, [r2, #0]
 80003ca:	431a      	orrs	r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	e007      	b.n	80003e2 <MCAL_GPIO_Init+0xd8>
			}
			else
			{
				GPIOx->ODR  &= ~(PinConfig->GPIO_PinNumber);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	68db      	ldr	r3, [r3, #12]
 80003d6:	683a      	ldr	r2, [r7, #0]
 80003d8:	8812      	ldrh	r2, [r2, #0]
 80003da:	43d2      	mvns	r2, r2
 80003dc:	401a      	ands	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	60da      	str	r2, [r3, #12]
			}
		}
	}

	//write on the CRL or CRH
	(*ConfigRegister) |= ((Pin) << GET_CRLH_Position(PinConfig->GPIO_PinNumber));
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	881b      	ldrh	r3, [r3, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff2c 	bl	8000244 <GET_CRLH_Position>
 80003ec:	4603      	mov	r3, r0
 80003ee:	461a      	mov	r2, r3
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	fa03 f202 	lsl.w	r2, r3, r2
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	431a      	orrs	r2, r3
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	601a      	str	r2, [r3, #0]
}
 8000400:	bf00      	nop
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <MCAL_GPIO_ReadPin>:
 * @retval	 	-The Reading value of the input pin
 * Note			-none
 */

uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx,uint16_t PinNumber)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	460b      	mov	r3, r1
 8000412:	807b      	strh	r3, [r7, #2]
	uint8_t pinStatus;
	if((GPIOx->IDR & PinNumber) != (uint32_t)GPIO_PIN_RESET)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	689a      	ldr	r2, [r3, #8]
 8000418:	887b      	ldrh	r3, [r7, #2]
 800041a:	4013      	ands	r3, r2
 800041c:	2b00      	cmp	r3, #0
 800041e:	d002      	beq.n	8000426 <MCAL_GPIO_ReadPin+0x1e>
	{
		pinStatus = GPIO_PIN_SET;
 8000420:	2301      	movs	r3, #1
 8000422:	73fb      	strb	r3, [r7, #15]
 8000424:	e001      	b.n	800042a <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		pinStatus = GPIO_PIN_RESET;
 8000426:	2300      	movs	r3, #0
 8000428:	73fb      	strb	r3, [r7, #15]

	}
	return pinStatus;
 800042a:	7bfb      	ldrb	r3, [r7, #15]
}
 800042c:	4618      	mov	r0, r3
 800042e:	3714      	adds	r7, #20
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <MCAL_GPIO_ReadPort>:
 * @retval	 	-The input port value
 * Note			-none
 */

uint16_t MCAL_GPIO_ReadPort(GPIO_TypeDef* GPIOx)
{
 8000436:	b480      	push	{r7}
 8000438:	b085      	sub	sp, #20
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
	uint16_t portStatus;
	portStatus = (uint16_t)(GPIOx->IDR);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	81fb      	strh	r3, [r7, #14]
	return portStatus;
 8000444:	89fb      	ldrh	r3, [r7, #14]
}
 8000446:	4618      	mov	r0, r3
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr

08000450 <MCAL_GPIO_WritePin>:
 * @retval	 	-none
 * Note			-none
 */

void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOx,uint16_t PinNumber,uint8_t Value)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	807b      	strh	r3, [r7, #2]
 800045c:	4613      	mov	r3, r2
 800045e:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_PIN_RESET)
 8000460:	787b      	ldrb	r3, [r7, #1]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d003      	beq.n	800046e <MCAL_GPIO_WritePin+0x1e>
	/*	Bits 31:16 BRy: Port x Reset bit y (y= 0 .. 15)
		These bits are write-only and can be accessed in Word mode only.
		0: No action on the corresponding ODRx bit
		1: Reset the corresponding ODRx bit
		Note: If both BSx and BRx are set, BSx has priorit	*/
	GPIOx->BSRR = (uint32_t)PinNumber;
 8000466:	887a      	ldrh	r2, [r7, #2]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	611a      	str	r2, [r3, #16]
		These bits are write-only and can be accessed in Word mode only.
		0: No action on the corresponding ODRx bit
		1: Reset the corresponding ODRx bit */
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 800046c:	e002      	b.n	8000474 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 800046e:	887a      	ldrh	r2, [r7, #2]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	615a      	str	r2, [r3, #20]
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr

0800047e <MCAL_GPIO_WritePort>:
 * @retval	 	-none
 * Note			-none
 */

void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOx,uint16_t Value)
{
 800047e:	b480      	push	{r7}
 8000480:	b083      	sub	sp, #12
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
 8000486:	460b      	mov	r3, r1
 8000488:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 800048a:	887a      	ldrh	r2, [r7, #2]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	60da      	str	r2, [r3, #12]

}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
	...

0800049c <KEYPAD_INIT>:
int KeyPad_R[] = {R0,R1,R2,R3};
int KeyPad_C[] = {C0,C1,C2,C3};	

GPIO_PinConfig_t pinConfig;

void KEYPAD_INIT(void){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	//DateDir_KEYPAD_PORT &= ~((1<<R0)|(1<<R1) | (1<<R2) | (1<<R3));

	pinConfig.GPIO_PinNumber = R0;
 80004a0:	4b37      	ldr	r3, [pc, #220]	; (8000580 <KEYPAD_INIT+0xe4>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 80004a6:	4b36      	ldr	r3, [pc, #216]	; (8000580 <KEYPAD_INIT+0xe4>)
 80004a8:	2204      	movs	r2, #4
 80004aa:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 80004ac:	4b34      	ldr	r3, [pc, #208]	; (8000580 <KEYPAD_INIT+0xe4>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinConfig);
 80004b2:	4933      	ldr	r1, [pc, #204]	; (8000580 <KEYPAD_INIT+0xe4>)
 80004b4:	4833      	ldr	r0, [pc, #204]	; (8000584 <KEYPAD_INIT+0xe8>)
 80004b6:	f7ff ff28 	bl	800030a <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = R1;
 80004ba:	4b31      	ldr	r3, [pc, #196]	; (8000580 <KEYPAD_INIT+0xe4>)
 80004bc:	2202      	movs	r2, #2
 80004be:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 80004c0:	4b2f      	ldr	r3, [pc, #188]	; (8000580 <KEYPAD_INIT+0xe4>)
 80004c2:	2204      	movs	r2, #4
 80004c4:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 80004c6:	4b2e      	ldr	r3, [pc, #184]	; (8000580 <KEYPAD_INIT+0xe4>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinConfig);
 80004cc:	492c      	ldr	r1, [pc, #176]	; (8000580 <KEYPAD_INIT+0xe4>)
 80004ce:	482d      	ldr	r0, [pc, #180]	; (8000584 <KEYPAD_INIT+0xe8>)
 80004d0:	f7ff ff1b 	bl	800030a <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = R2;
 80004d4:	4b2a      	ldr	r3, [pc, #168]	; (8000580 <KEYPAD_INIT+0xe4>)
 80004d6:	2208      	movs	r2, #8
 80004d8:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 80004da:	4b29      	ldr	r3, [pc, #164]	; (8000580 <KEYPAD_INIT+0xe4>)
 80004dc:	2204      	movs	r2, #4
 80004de:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 80004e0:	4b27      	ldr	r3, [pc, #156]	; (8000580 <KEYPAD_INIT+0xe4>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinConfig);
 80004e6:	4926      	ldr	r1, [pc, #152]	; (8000580 <KEYPAD_INIT+0xe4>)
 80004e8:	4826      	ldr	r0, [pc, #152]	; (8000584 <KEYPAD_INIT+0xe8>)
 80004ea:	f7ff ff0e 	bl	800030a <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber =R3;
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <KEYPAD_INIT+0xe4>)
 80004f0:	2210      	movs	r2, #16
 80004f2:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 80004f4:	4b22      	ldr	r3, [pc, #136]	; (8000580 <KEYPAD_INIT+0xe4>)
 80004f6:	2204      	movs	r2, #4
 80004f8:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <KEYPAD_INIT+0xe4>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinConfig);
 8000500:	491f      	ldr	r1, [pc, #124]	; (8000580 <KEYPAD_INIT+0xe4>)
 8000502:	4820      	ldr	r0, [pc, #128]	; (8000584 <KEYPAD_INIT+0xe8>)
 8000504:	f7ff ff01 	bl	800030a <MCAL_GPIO_Init>

	//DateDir_KEYPAD_PORT |= ((1<<C0)|(1<<C1) | (1<<C2) | (1<<C3));
	pinConfig.GPIO_PinNumber = C0;
 8000508:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <KEYPAD_INIT+0xe4>)
 800050a:	2220      	movs	r2, #32
 800050c:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 800050e:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <KEYPAD_INIT+0xe4>)
 8000510:	2204      	movs	r2, #4
 8000512:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000514:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <KEYPAD_INIT+0xe4>)
 8000516:	2201      	movs	r2, #1
 8000518:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinConfig);
 800051a:	4919      	ldr	r1, [pc, #100]	; (8000580 <KEYPAD_INIT+0xe4>)
 800051c:	4819      	ldr	r0, [pc, #100]	; (8000584 <KEYPAD_INIT+0xe8>)
 800051e:	f7ff fef4 	bl	800030a <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = C1;
 8000522:	4b17      	ldr	r3, [pc, #92]	; (8000580 <KEYPAD_INIT+0xe4>)
 8000524:	2240      	movs	r2, #64	; 0x40
 8000526:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <KEYPAD_INIT+0xe4>)
 800052a:	2204      	movs	r2, #4
 800052c:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <KEYPAD_INIT+0xe4>)
 8000530:	2201      	movs	r2, #1
 8000532:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinConfig);
 8000534:	4912      	ldr	r1, [pc, #72]	; (8000580 <KEYPAD_INIT+0xe4>)
 8000536:	4813      	ldr	r0, [pc, #76]	; (8000584 <KEYPAD_INIT+0xe8>)
 8000538:	f7ff fee7 	bl	800030a <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = C2;
 800053c:	4b10      	ldr	r3, [pc, #64]	; (8000580 <KEYPAD_INIT+0xe4>)
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <KEYPAD_INIT+0xe4>)
 8000544:	2204      	movs	r2, #4
 8000546:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <KEYPAD_INIT+0xe4>)
 800054a:	2201      	movs	r2, #1
 800054c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinConfig);
 800054e:	490c      	ldr	r1, [pc, #48]	; (8000580 <KEYPAD_INIT+0xe4>)
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <KEYPAD_INIT+0xe8>)
 8000552:	f7ff feda 	bl	800030a <MCAL_GPIO_Init>

	pinConfig.GPIO_PinNumber = C3;
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <KEYPAD_INIT+0xe4>)
 8000558:	f44f 7280 	mov.w	r2, #256	; 0x100
 800055c:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <KEYPAD_INIT+0xe4>)
 8000560:	2204      	movs	r2, #4
 8000562:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <KEYPAD_INIT+0xe4>)
 8000566:	2201      	movs	r2, #1
 8000568:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinConfig);
 800056a:	4905      	ldr	r1, [pc, #20]	; (8000580 <KEYPAD_INIT+0xe4>)
 800056c:	4805      	ldr	r0, [pc, #20]	; (8000584 <KEYPAD_INIT+0xe8>)
 800056e:	f7ff fecc 	bl	800030a <MCAL_GPIO_Init>

	//KEYPAD_PORT = 0xff;
	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 8000572:	21ff      	movs	r1, #255	; 0xff
 8000574:	4803      	ldr	r0, [pc, #12]	; (8000584 <KEYPAD_INIT+0xe8>)
 8000576:	f7ff ff82 	bl	800047e <MCAL_GPIO_WritePort>

}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	2000003c 	.word	0x2000003c
 8000584:	40010c00 	.word	0x40010c00

08000588 <KEYPAD_GET_CHAR>:

char KEYPAD_GET_CHAR(void){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
	int i,j;
	for(i = 0; i < 4 ; i++){
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	e0b4      	b.n	80006fe <KEYPAD_GET_CHAR+0x176>
		//KEYPAD_PORT |= ((1<<KeyPad_C[0]) | (1<<KeyPad_C[1]) | (1<<KeyPad_C[2]) | (1<<KeyPad_C[3])); //initially, all 1(not ptressed)

		MCAL_GPIO_WritePin(KEYPAD_PORT, KeyPad_C[0], GPIO_PIN_SET);
 8000594:	4b5e      	ldr	r3, [pc, #376]	; (8000710 <KEYPAD_GET_CHAR+0x188>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	b29b      	uxth	r3, r3
 800059a:	2201      	movs	r2, #1
 800059c:	4619      	mov	r1, r3
 800059e:	485d      	ldr	r0, [pc, #372]	; (8000714 <KEYPAD_GET_CHAR+0x18c>)
 80005a0:	f7ff ff56 	bl	8000450 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KeyPad_C[1], GPIO_PIN_SET);
 80005a4:	4b5a      	ldr	r3, [pc, #360]	; (8000710 <KEYPAD_GET_CHAR+0x188>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	2201      	movs	r2, #1
 80005ac:	4619      	mov	r1, r3
 80005ae:	4859      	ldr	r0, [pc, #356]	; (8000714 <KEYPAD_GET_CHAR+0x18c>)
 80005b0:	f7ff ff4e 	bl	8000450 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KeyPad_C[2], GPIO_PIN_SET);
 80005b4:	4b56      	ldr	r3, [pc, #344]	; (8000710 <KEYPAD_GET_CHAR+0x188>)
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	2201      	movs	r2, #1
 80005bc:	4619      	mov	r1, r3
 80005be:	4855      	ldr	r0, [pc, #340]	; (8000714 <KEYPAD_GET_CHAR+0x18c>)
 80005c0:	f7ff ff46 	bl	8000450 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KeyPad_C[3], GPIO_PIN_SET);
 80005c4:	4b52      	ldr	r3, [pc, #328]	; (8000710 <KEYPAD_GET_CHAR+0x188>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	2201      	movs	r2, #1
 80005cc:	4619      	mov	r1, r3
 80005ce:	4851      	ldr	r0, [pc, #324]	; (8000714 <KEYPAD_GET_CHAR+0x18c>)
 80005d0:	f7ff ff3e 	bl	8000450 <MCAL_GPIO_WritePin>

		//KEYPAD_PORT &= ~(1<<KeyPad_C[i]);
		MCAL_GPIO_WritePin(KEYPAD_PORT, KeyPad_C[i], GPIO_PIN_RESET);
 80005d4:	4a4e      	ldr	r2, [pc, #312]	; (8000710 <KEYPAD_GET_CHAR+0x188>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	2200      	movs	r2, #0
 80005e0:	4619      	mov	r1, r3
 80005e2:	484c      	ldr	r0, [pc, #304]	; (8000714 <KEYPAD_GET_CHAR+0x18c>)
 80005e4:	f7ff ff34 	bl	8000450 <MCAL_GPIO_WritePin>

		for(j = 0; j < 4; j++){
 80005e8:	2300      	movs	r3, #0
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	e080      	b.n	80006f0 <KEYPAD_GET_CHAR+0x168>

			if(MCAL_GPIO_ReadPin(KEYPAD_PORT, KeyPad_R[j]) == 0){	//check if press
 80005ee:	4a4a      	ldr	r2, [pc, #296]	; (8000718 <KEYPAD_GET_CHAR+0x190>)
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	4619      	mov	r1, r3
 80005fa:	4846      	ldr	r0, [pc, #280]	; (8000714 <KEYPAD_GET_CHAR+0x18c>)
 80005fc:	f7ff ff04 	bl	8000408 <MCAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d171      	bne.n	80006ea <KEYPAD_GET_CHAR+0x162>
				while(MCAL_GPIO_ReadPin(KEYPAD_PORT, KeyPad_R[j]) == 0); //single pressing
 8000606:	bf00      	nop
 8000608:	4a43      	ldr	r2, [pc, #268]	; (8000718 <KEYPAD_GET_CHAR+0x190>)
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000610:	b29b      	uxth	r3, r3
 8000612:	4619      	mov	r1, r3
 8000614:	483f      	ldr	r0, [pc, #252]	; (8000714 <KEYPAD_GET_CHAR+0x18c>)
 8000616:	f7ff fef7 	bl	8000408 <MCAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0f3      	beq.n	8000608 <KEYPAD_GET_CHAR+0x80>
				switch(i){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d861      	bhi.n	80006ea <KEYPAD_GET_CHAR+0x162>
 8000626:	a201      	add	r2, pc, #4	; (adr r2, 800062c <KEYPAD_GET_CHAR+0xa4>)
 8000628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062c:	0800063d 	.word	0x0800063d
 8000630:	08000665 	.word	0x08000665
 8000634:	0800068d 	.word	0x0800068d
 8000638:	080006b5 	.word	0x080006b5
				case 0:
					if(j == 0)	return '7';
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d101      	bne.n	8000646 <KEYPAD_GET_CHAR+0xbe>
 8000642:	2337      	movs	r3, #55	; 0x37
 8000644:	e060      	b.n	8000708 <KEYPAD_GET_CHAR+0x180>
					else if(j == 1) return '4';
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d101      	bne.n	8000650 <KEYPAD_GET_CHAR+0xc8>
 800064c:	2334      	movs	r3, #52	; 0x34
 800064e:	e05b      	b.n	8000708 <KEYPAD_GET_CHAR+0x180>
					else if(j == 2) return '1';
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d101      	bne.n	800065a <KEYPAD_GET_CHAR+0xd2>
 8000656:	2331      	movs	r3, #49	; 0x31
 8000658:	e056      	b.n	8000708 <KEYPAD_GET_CHAR+0x180>
					else if(j == 3) return '!';
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2b03      	cmp	r3, #3
 800065e:	d13d      	bne.n	80006dc <KEYPAD_GET_CHAR+0x154>
 8000660:	2321      	movs	r3, #33	; 0x21
 8000662:	e051      	b.n	8000708 <KEYPAD_GET_CHAR+0x180>
					break;

				case 1:
					if(j == 0)	return '8';
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d101      	bne.n	800066e <KEYPAD_GET_CHAR+0xe6>
 800066a:	2338      	movs	r3, #56	; 0x38
 800066c:	e04c      	b.n	8000708 <KEYPAD_GET_CHAR+0x180>
					else if(j == 1) return '5';
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d101      	bne.n	8000678 <KEYPAD_GET_CHAR+0xf0>
 8000674:	2335      	movs	r3, #53	; 0x35
 8000676:	e047      	b.n	8000708 <KEYPAD_GET_CHAR+0x180>
					else if(j == 2) return '2';
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	2b02      	cmp	r3, #2
 800067c:	d101      	bne.n	8000682 <KEYPAD_GET_CHAR+0xfa>
 800067e:	2332      	movs	r3, #50	; 0x32
 8000680:	e042      	b.n	8000708 <KEYPAD_GET_CHAR+0x180>
					else if(j == 3) return '0';
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d12b      	bne.n	80006e0 <KEYPAD_GET_CHAR+0x158>
 8000688:	2330      	movs	r3, #48	; 0x30
 800068a:	e03d      	b.n	8000708 <KEYPAD_GET_CHAR+0x180>
					break;

				case 2:
					if(j == 0)	return '9';
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d101      	bne.n	8000696 <KEYPAD_GET_CHAR+0x10e>
 8000692:	2339      	movs	r3, #57	; 0x39
 8000694:	e038      	b.n	8000708 <KEYPAD_GET_CHAR+0x180>
					else if(j == 1) return '6';
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d101      	bne.n	80006a0 <KEYPAD_GET_CHAR+0x118>
 800069c:	2336      	movs	r3, #54	; 0x36
 800069e:	e033      	b.n	8000708 <KEYPAD_GET_CHAR+0x180>
					else if(j == 2) return '3';
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d101      	bne.n	80006aa <KEYPAD_GET_CHAR+0x122>
 80006a6:	2333      	movs	r3, #51	; 0x33
 80006a8:	e02e      	b.n	8000708 <KEYPAD_GET_CHAR+0x180>
					else if(j == 3) return '=';
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	d119      	bne.n	80006e4 <KEYPAD_GET_CHAR+0x15c>
 80006b0:	233d      	movs	r3, #61	; 0x3d
 80006b2:	e029      	b.n	8000708 <KEYPAD_GET_CHAR+0x180>
					break;

				case 3:
					if(j == 0)	return '/';
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d101      	bne.n	80006be <KEYPAD_GET_CHAR+0x136>
 80006ba:	232f      	movs	r3, #47	; 0x2f
 80006bc:	e024      	b.n	8000708 <KEYPAD_GET_CHAR+0x180>
					else if(j == 1) return '*';
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d101      	bne.n	80006c8 <KEYPAD_GET_CHAR+0x140>
 80006c4:	232a      	movs	r3, #42	; 0x2a
 80006c6:	e01f      	b.n	8000708 <KEYPAD_GET_CHAR+0x180>
					else if(j == 2) return '-';
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d101      	bne.n	80006d2 <KEYPAD_GET_CHAR+0x14a>
 80006ce:	232d      	movs	r3, #45	; 0x2d
 80006d0:	e01a      	b.n	8000708 <KEYPAD_GET_CHAR+0x180>
					else if(j == 3) return '+';
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d107      	bne.n	80006e8 <KEYPAD_GET_CHAR+0x160>
 80006d8:	232b      	movs	r3, #43	; 0x2b
 80006da:	e015      	b.n	8000708 <KEYPAD_GET_CHAR+0x180>
					break;
 80006dc:	bf00      	nop
 80006de:	e004      	b.n	80006ea <KEYPAD_GET_CHAR+0x162>
					break;
 80006e0:	bf00      	nop
 80006e2:	e002      	b.n	80006ea <KEYPAD_GET_CHAR+0x162>
					break;
 80006e4:	bf00      	nop
 80006e6:	e000      	b.n	80006ea <KEYPAD_GET_CHAR+0x162>
					break;
 80006e8:	bf00      	nop
		for(j = 0; j < 4; j++){
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	f77f af7b 	ble.w	80005ee <KEYPAD_GET_CHAR+0x66>
	for(i = 0; i < 4 ; i++){
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3301      	adds	r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b03      	cmp	r3, #3
 8000702:	f77f af47 	ble.w	8000594 <KEYPAD_GET_CHAR+0xc>
				}
			}
		}
	}
	return 'N';	//if nothing pressed
 8000706:	234e      	movs	r3, #78	; 0x4e
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000010 	.word	0x20000010
 8000714:	40010c00 	.word	0x40010c00
 8000718:	20000000 	.word	0x20000000

0800071c <delay_ms>:
 *  Author: Marco
 */

#include "lcd.h"
GPIO_PinConfig_t PinCfg ;
void delay_ms(uint32_t time) {
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	e00b      	b.n	8000742 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	e002      	b.n	8000736 <delay_ms+0x1a>
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	3301      	adds	r3, #1
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	2bfe      	cmp	r3, #254	; 0xfe
 800073a:	d9f9      	bls.n	8000730 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3301      	adds	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	429a      	cmp	r2, r3
 8000748:	d3ef      	bcc.n	800072a <delay_ms+0xe>
			;
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <LCD_clear_screen>:



void LCD_clear_screen() {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000758:	2001      	movs	r0, #1
 800075a:	f000 f967 	bl	8000a2c <LCD_WRITE_COMMAND>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <LCD_KICK>:

void LCD_KICK() {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076e:	4808      	ldr	r0, [pc, #32]	; (8000790 <LCD_KICK+0x2c>)
 8000770:	f7ff fe6e 	bl	8000450 <MCAL_GPIO_WritePin>
	asm volatile ("nop");
 8000774:	bf00      	nop
	asm volatile ("nop");
 8000776:	bf00      	nop
	delay_ms(50);
 8000778:	2032      	movs	r0, #50	; 0x32
 800077a:	f7ff ffcf 	bl	800071c <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <LCD_KICK+0x2c>)
 8000786:	f7ff fe63 	bl	8000450 <MCAL_GPIO_WritePin>
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40010800 	.word	0x40010800

08000794 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	460a      	mov	r2, r1
 800079e:	71fb      	strb	r3, [r7, #7]
 80007a0:	4613      	mov	r3, r2
 80007a2:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d108      	bne.n	80007bc <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 80007aa:	79bb      	ldrb	r3, [r7, #6]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	d805      	bhi.n	80007bc <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	3b80      	subs	r3, #128	; 0x80
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f938 	bl	8000a2c <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d108      	bne.n	80007d4 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	d805      	bhi.n	80007d4 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 80007c8:	79bb      	ldrb	r3, [r7, #6]
 80007ca:	3b40      	subs	r3, #64	; 0x40
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f92c 	bl	8000a2c <LCD_WRITE_COMMAND>
		}
	}
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <LCD_INIT>:

void LCD_INIT() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

	delay_ms(20);
 80007e0:	2014      	movs	r0, #20
 80007e2:	f7ff ff9b 	bl	800071c <delay_ms>


	// SET THE FIRST 3 PINS AS OUPUT

	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80007e6:	4b24      	ldr	r3, [pc, #144]	; (8000878 <LCD_INIT+0x9c>)
 80007e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ec:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 80007ee:	4b22      	ldr	r3, [pc, #136]	; (8000878 <LCD_INIT+0x9c>)
 80007f0:	2204      	movs	r2, #4
 80007f2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 80007f4:	4b20      	ldr	r3, [pc, #128]	; (8000878 <LCD_INIT+0x9c>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80007fa:	491f      	ldr	r1, [pc, #124]	; (8000878 <LCD_INIT+0x9c>)
 80007fc:	481f      	ldr	r0, [pc, #124]	; (800087c <LCD_INIT+0xa0>)
 80007fe:	f7ff fd84 	bl	800030a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 8000802:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <LCD_INIT+0x9c>)
 8000804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000808:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 800080a:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <LCD_INIT+0x9c>)
 800080c:	2204      	movs	r2, #4
 800080e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <LCD_INIT+0x9c>)
 8000812:	2201      	movs	r2, #1
 8000814:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000816:	4918      	ldr	r1, [pc, #96]	; (8000878 <LCD_INIT+0x9c>)
 8000818:	4818      	ldr	r0, [pc, #96]	; (800087c <LCD_INIT+0xa0>)
 800081a:	f7ff fd76 	bl	800030a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <LCD_INIT+0x9c>)
 8000820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000824:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <LCD_INIT+0x9c>)
 8000828:	2204      	movs	r2, #4
 800082a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <LCD_INIT+0x9c>)
 800082e:	2201      	movs	r2, #1
 8000830:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000832:	4911      	ldr	r1, [pc, #68]	; (8000878 <LCD_INIT+0x9c>)
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <LCD_INIT+0xa0>)
 8000836:	f7ff fd68 	bl	800030a <MCAL_GPIO_Init>

	LCD_IS_BUSY();
 800083a:	f000 f821 	bl	8000880 <LCD_IS_BUSY>
	//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 800083e:	200f      	movs	r0, #15
 8000840:	f7ff ff6c 	bl	800071c <delay_ms>

	LCD_clear_screen();
 8000844:	f7ff ff86 	bl	8000754 <LCD_clear_screen>
	delay_ms(50);
 8000848:	2032      	movs	r0, #50	; 0x32
 800084a:	f7ff ff67 	bl	800071c <delay_ms>

#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 800084e:	2038      	movs	r0, #56	; 0x38
 8000850:	f000 f8ec 	bl	8000a2c <LCD_WRITE_COMMAND>
	delay_ms(1);
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff ff61 	bl	800071c <delay_ms>
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	_delay_us(50);
	#endif*/

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800085a:	2006      	movs	r0, #6
 800085c:	f000 f8e6 	bl	8000a2c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000860:	2080      	movs	r0, #128	; 0x80
 8000862:	f000 f8e3 	bl	8000a2c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000866:	200f      	movs	r0, #15
 8000868:	f000 f8e0 	bl	8000a2c <LCD_WRITE_COMMAND>
	delay_ms(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff ff55 	bl	800071c <delay_ms>
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000040 	.word	0x20000040
 800087c:	40010800 	.word	0x40010800

08000880 <LCD_IS_BUSY>:

void LCD_IS_BUSY() {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	//DataDir_LCD_PORT &= ~(0xFF << DATA_SHIFT);
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000884:	4b67      	ldr	r3, [pc, #412]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000886:	2201      	movs	r2, #1
 8000888:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800088a:	4b66      	ldr	r3, [pc, #408]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 800088c:	2201      	movs	r2, #1
 800088e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000890:	4964      	ldr	r1, [pc, #400]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000892:	4865      	ldr	r0, [pc, #404]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 8000894:	f7ff fd39 	bl	800030a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000898:	4b62      	ldr	r3, [pc, #392]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 800089a:	2202      	movs	r2, #2
 800089c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800089e:	4b61      	ldr	r3, [pc, #388]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80008a4:	495f      	ldr	r1, [pc, #380]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80008a6:	4860      	ldr	r0, [pc, #384]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 80008a8:	f7ff fd2f 	bl	800030a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80008ac:	4b5d      	ldr	r3, [pc, #372]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80008ae:	2204      	movs	r2, #4
 80008b0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80008b2:	4b5c      	ldr	r3, [pc, #368]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80008b8:	495a      	ldr	r1, [pc, #360]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80008ba:	485b      	ldr	r0, [pc, #364]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 80008bc:	f7ff fd25 	bl	800030a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80008c0:	4b58      	ldr	r3, [pc, #352]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80008c2:	2208      	movs	r2, #8
 80008c4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80008c6:	4b57      	ldr	r3, [pc, #348]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80008cc:	4955      	ldr	r1, [pc, #340]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80008ce:	4856      	ldr	r0, [pc, #344]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 80008d0:	f7ff fd1b 	bl	800030a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80008d4:	4b53      	ldr	r3, [pc, #332]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80008d6:	2210      	movs	r2, #16
 80008d8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80008da:	4b52      	ldr	r3, [pc, #328]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80008dc:	2201      	movs	r2, #1
 80008de:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80008e0:	4950      	ldr	r1, [pc, #320]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80008e2:	4851      	ldr	r0, [pc, #324]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 80008e4:	f7ff fd11 	bl	800030a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80008e8:	4b4e      	ldr	r3, [pc, #312]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80008ea:	2220      	movs	r2, #32
 80008ec:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80008ee:	4b4d      	ldr	r3, [pc, #308]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80008f4:	494b      	ldr	r1, [pc, #300]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80008f6:	484c      	ldr	r0, [pc, #304]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 80008f8:	f7ff fd07 	bl	800030a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80008fc:	4b49      	ldr	r3, [pc, #292]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80008fe:	2240      	movs	r2, #64	; 0x40
 8000900:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000902:	4b48      	ldr	r3, [pc, #288]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000904:	2201      	movs	r2, #1
 8000906:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000908:	4946      	ldr	r1, [pc, #280]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 800090a:	4847      	ldr	r0, [pc, #284]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 800090c:	f7ff fcfd 	bl	800030a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000910:	4b44      	ldr	r3, [pc, #272]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000916:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000918:	2201      	movs	r2, #1
 800091a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800091c:	4941      	ldr	r1, [pc, #260]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 800091e:	4842      	ldr	r0, [pc, #264]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 8000920:	f7ff fcf3 	bl	800030a <MCAL_GPIO_Init>

	//	LCD_CTRL |= (1 << RW_SWITCH);
	//	LCD_CTRL &= ~(1 << RS_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 7100 	mov.w	r1, #512	; 0x200
 800092a:	483f      	ldr	r0, [pc, #252]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 800092c:	f7ff fd90 	bl	8000450 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000936:	483c      	ldr	r0, [pc, #240]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 8000938:	f7ff fd8a 	bl	8000450 <MCAL_GPIO_WritePin>

	while((MCAL_GPIO_ReadPort(LCD_CTRL) & ((uint16_t)(0x80)) ) << 7 == 1)	//pin 7 on => is busy
 800093c:	bf00      	nop
 800093e:	483a      	ldr	r0, [pc, #232]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 8000940:	f7ff fd79 	bl	8000436 <MCAL_GPIO_ReadPort>
		LCD_KICK();

	//	DataDir_LCD_PORT |= (0xFF << DATA_shift);
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000944:	4b37      	ldr	r3, [pc, #220]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000946:	2201      	movs	r2, #1
 8000948:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 800094a:	4b36      	ldr	r3, [pc, #216]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 800094c:	2204      	movs	r2, #4
 800094e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000950:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000952:	2201      	movs	r2, #1
 8000954:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000956:	4933      	ldr	r1, [pc, #204]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000958:	4833      	ldr	r0, [pc, #204]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 800095a:	f7ff fcd6 	bl	800030a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800095e:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000960:	2202      	movs	r2, #2
 8000962:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000964:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000966:	2204      	movs	r2, #4
 8000968:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 800096a:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 800096c:	2201      	movs	r2, #1
 800096e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000970:	492c      	ldr	r1, [pc, #176]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000972:	482d      	ldr	r0, [pc, #180]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 8000974:	f7ff fcc9 	bl	800030a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 800097a:	2204      	movs	r2, #4
 800097c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 800097e:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000980:	2204      	movs	r2, #4
 8000982:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000986:	2201      	movs	r2, #1
 8000988:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800098a:	4926      	ldr	r1, [pc, #152]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 800098c:	4826      	ldr	r0, [pc, #152]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 800098e:	f7ff fcbc 	bl	800030a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000994:	2208      	movs	r2, #8
 8000996:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 800099a:	2204      	movs	r2, #4
 800099c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80009a4:	491f      	ldr	r1, [pc, #124]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80009a6:	4820      	ldr	r0, [pc, #128]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 80009a8:	f7ff fcaf 	bl	800030a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80009ae:	2210      	movs	r2, #16
 80009b0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80009b4:	2204      	movs	r2, #4
 80009b6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80009be:	4919      	ldr	r1, [pc, #100]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80009c0:	4819      	ldr	r0, [pc, #100]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 80009c2:	f7ff fca2 	bl	800030a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80009c8:	2220      	movs	r2, #32
 80009ca:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80009ce:	2204      	movs	r2, #4
 80009d0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80009d8:	4912      	ldr	r1, [pc, #72]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80009da:	4813      	ldr	r0, [pc, #76]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 80009dc:	f7ff fc95 	bl	800030a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80009e2:	2240      	movs	r2, #64	; 0x40
 80009e4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80009e8:	2204      	movs	r2, #4
 80009ea:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 80009ec:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80009f2:	490c      	ldr	r1, [pc, #48]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 80009f6:	f7ff fc88 	bl	800030a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUPUT_PP;
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000a02:	2204      	movs	r2, #4
 8000a04:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_output_speed = GPIO_SPEED_OUTPUT_10;
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000a0c:	4905      	ldr	r1, [pc, #20]	; (8000a24 <LCD_IS_BUSY+0x1a4>)
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 8000a10:	f7ff fc7b 	bl	800030a <MCAL_GPIO_Init>

	//	LCD_CTRL &= ~(1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1a:	4803      	ldr	r0, [pc, #12]	; (8000a28 <LCD_IS_BUSY+0x1a8>)
 8000a1c:	f7ff fd18 	bl	8000450 <MCAL_GPIO_WritePin>


}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000040 	.word	0x20000040
 8000a28:	40010800 	.word	0x40010800

08000a2c <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND(unsigned char command) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	//LCD_IS_BUSY();
#ifdef EIGHT_BIT_MODE
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480b      	ldr	r0, [pc, #44]	; (8000a6c <LCD_WRITE_COMMAND+0x40>)
 8000a3e:	f7ff fd1e 	bl	800047e <MCAL_GPIO_WritePort>
	//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
	//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
	//	LCD_CTRL->CRL = command;
	//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <LCD_WRITE_COMMAND+0x40>)
 8000a4a:	f7ff fd01 	bl	8000450 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <LCD_WRITE_COMMAND+0x40>)
 8000a56:	f7ff fcfb 	bl	8000450 <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f7ff fe5e 	bl	800071c <delay_ms>
	LCD_KICK();
 8000a60:	f7ff fe80 	bl	8000764 <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (command << DATA_SHIFT);
	LCD_CTRL &= ~((1<<RW_SWITCH | 1<<RS_SWITCH));	//r/w off(write mode), (RS)Command mode
	LCD_KICK();	//flash the above info to lcd
	_delay_ms(1);
#endif*/
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40010800 	.word	0x40010800

08000a70 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	//LCD_IS_BUSY();
	//	LCD_CTRL->CRL = character;
#ifdef EIGHT_BIT_MODE
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <LCD_WRITE_CHAR+0x40>)
 8000a82:	f7ff fcfc 	bl	800047e <MCAL_GPIO_WritePort>
	//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8c:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <LCD_WRITE_CHAR+0x40>)
 8000a8e:	f7ff fcdf 	bl	8000450 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <LCD_WRITE_CHAR+0x40>)
 8000a9a:	f7ff fcd9 	bl	8000450 <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~(1 << RW_SWITCH);
	//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f7ff fe3c 	bl	800071c <delay_ms>
	LCD_KICK();
 8000aa4:	f7ff fe5e 	bl	8000764 <LCD_KICK>
	LCD_CTRL |= 1<<RS_SWITCH;		//data mode
	LCD_KICK();	//flash the above info to lcd
	_delay_ms(1);
#endif*/

}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40010800 	.word	0x40010800

08000ab4 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000ac0:	e01c      	b.n	8000afc <LCD_WRITE_STRING+0x48>
		count++;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ffcd 	bl	8000a70 <LCD_WRITE_CHAR>
		if (count == 16) {
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2b10      	cmp	r3, #16
 8000ada:	d104      	bne.n	8000ae6 <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2002      	movs	r0, #2
 8000ae0:	f7ff fe58 	bl	8000794 <LCD_GOTO_XY>
 8000ae4:	e00a      	b.n	8000afc <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2b20      	cmp	r3, #32
 8000aea:	d107      	bne.n	8000afc <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 8000aec:	f7ff fe32 	bl	8000754 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 8000af0:	2100      	movs	r1, #0
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff fe4e 	bl	8000794 <LCD_GOTO_XY>
			count = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1de      	bne.n	8000ac2 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <clock_init>:
#define SIX 0x02
#define SEVEN 0x19
#define EIGHT 0x00
#define NINE 0x10

void clock_init() {
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
	//Enable clock GPIOA
	RCC_GPIOA_CLK_EN();
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <clock_init+0x24>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <clock_init+0x24>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	6193      	str	r3, [r2, #24]
	//Enable clock GPIOB Bit 3 IOPBEN: IO port B clock enable
	RCC_GPIOB_CLK_EN();
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <clock_init+0x24>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <clock_init+0x24>)
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	6193      	str	r3, [r2, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	40021000 	.word	0x40021000

08000b34 <wait_ms>:
void wait_ms(uint32_t time) {
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	e00b      	b.n	8000b5a <wait_ms+0x26>
		for (j = 0; j < 255; j++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	e002      	b.n	8000b4e <wait_ms+0x1a>
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	2bfe      	cmp	r3, #254	; 0xfe
 8000b52:	d9f9      	bls.n	8000b48 <wait_ms+0x14>
	for (i = 0; i < time; i++)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	3301      	adds	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d3ef      	bcc.n	8000b42 <wait_ms+0xe>
			;
}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <main>:
int main(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0

	clock_init();
 8000b72:	f7ff ffcb 	bl	8000b0c <clock_init>
	LCD_INIT();
 8000b76:	f7ff fe31 	bl	80007dc <LCD_INIT>

	SEG_INIT();
 8000b7a:	f7ff faf9 	bl	8000170 <SEG_INIT>
	LCD_WRITE_STRING("Keypad is ready");
 8000b7e:	4828      	ldr	r0, [pc, #160]	; (8000c20 <main+0xb4>)
 8000b80:	f7ff ff98 	bl	8000ab4 <LCD_WRITE_STRING>
	wait_ms(500);
 8000b84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b88:	f7ff ffd4 	bl	8000b34 <wait_ms>
	LCD_clear_screen();
 8000b8c:	f7ff fde2 	bl	8000754 <LCD_clear_screen>

	unsigned char key;
	unsigned char seg [] = {ZERO, ONE, TWO, THREE,FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 8000b90:	4a24      	ldr	r2, [pc, #144]	; (8000c24 <main+0xb8>)
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b98:	c303      	stmia	r3!, {r0, r1}
 8000b9a:	801a      	strh	r2, [r3, #0]
 8000b9c:	3302      	adds	r3, #2
 8000b9e:	0c12      	lsrs	r2, r2, #16
 8000ba0:	701a      	strb	r2, [r3, #0]
	unsigned char lcd[] = {'0','1','2', '3', '4', '5', '6', '7', '8', '9', '0'};
 8000ba2:	4a21      	ldr	r2, [pc, #132]	; (8000c28 <main+0xbc>)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ba8:	c303      	stmia	r3!, {r0, r1}
 8000baa:	801a      	strh	r2, [r3, #0]
 8000bac:	3302      	adds	r3, #2
 8000bae:	0c12      	lsrs	r2, r2, #16
 8000bb0:	701a      	strb	r2, [r3, #0]
	//7 segment
	for(unsigned int i = 0; i < 11; i++){
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	e018      	b.n	8000bea <main+0x7e>
		MCAL_GPIO_WritePort(GPIOB, seg[i] << 9);
 8000bb8:	f107 0210 	add.w	r2, r7, #16
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	025b      	lsls	r3, r3, #9
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4818      	ldr	r0, [pc, #96]	; (8000c2c <main+0xc0>)
 8000bcc:	f7ff fc57 	bl	800047e <MCAL_GPIO_WritePort>
		LCD_WRITE_CHAR(lcd[i]);
 8000bd0:	1d3a      	adds	r2, r7, #4
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff49 	bl	8000a70 <LCD_WRITE_CHAR>
		wait_ms(100);
 8000bde:	2064      	movs	r0, #100	; 0x64
 8000be0:	f7ff ffa8 	bl	8000b34 <wait_ms>
	for(unsigned int i = 0; i < 11; i++){
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	3301      	adds	r3, #1
 8000be8:	61fb      	str	r3, [r7, #28]
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	2b0a      	cmp	r3, #10
 8000bee:	d9e3      	bls.n	8000bb8 <main+0x4c>
	}
	LCD_clear_screen();
 8000bf0:	f7ff fdb0 	bl	8000754 <LCD_clear_screen>
	KEYPAD_INIT();
 8000bf4:	f7ff fc52 	bl	800049c <KEYPAD_INIT>
	while (1) {

		key = KEYPAD_GET_CHAR();
 8000bf8:	f7ff fcc6 	bl	8000588 <KEYPAD_GET_CHAR>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	76fb      	strb	r3, [r7, #27]
		switch(key){
 8000c00:	7efb      	ldrb	r3, [r7, #27]
 8000c02:	2b21      	cmp	r3, #33	; 0x21
 8000c04:	d002      	beq.n	8000c0c <main+0xa0>
 8000c06:	2b4e      	cmp	r3, #78	; 0x4e
 8000c08:	d008      	beq.n	8000c1c <main+0xb0>
 8000c0a:	e002      	b.n	8000c12 <main+0xa6>
		case '!':
			LCD_clear_screen();
 8000c0c:	f7ff fda2 	bl	8000754 <LCD_clear_screen>
			break;
 8000c10:	e005      	b.n	8000c1e <main+0xb2>

		case 'N':
			break;

		default:
			LCD_WRITE_CHAR(key);
 8000c12:	7efb      	ldrb	r3, [r7, #27]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff2b 	bl	8000a70 <LCD_WRITE_CHAR>
			break;
 8000c1a:	e000      	b.n	8000c1e <main+0xb2>
			break;
 8000c1c:	bf00      	nop
		key = KEYPAD_GET_CHAR();
 8000c1e:	e7eb      	b.n	8000bf8 <main+0x8c>
 8000c20:	08000ce4 	.word	0x08000ce4
 8000c24:	08000cf4 	.word	0x08000cf4
 8000c28:	08000d00 	.word	0x08000d00
 8000c2c:	40010c00 	.word	0x40010c00

08000c30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c32:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c3a:	490d      	ldr	r1, [pc, #52]	; (8000c70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <LoopForever+0xe>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c50:	4c0a      	ldr	r4, [pc, #40]	; (8000c7c <LoopForever+0x16>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c5e:	f000 f811 	bl	8000c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c62:	f7ff ff83 	bl	8000b6c <main>

08000c66 <LoopForever>:

LoopForever:
    b LoopForever
 8000c66:	e7fe      	b.n	8000c66 <LoopForever>
  ldr   r0, =_estack
 8000c68:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000c74:	08000d14 	.word	0x08000d14
  ldr r2, =_sbss
 8000c78:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000c7c:	20000044 	.word	0x20000044

08000c80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC1_2_IRQHandler>
	...

08000c84 <__libc_init_array>:
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	2500      	movs	r5, #0
 8000c88:	4e0c      	ldr	r6, [pc, #48]	; (8000cbc <__libc_init_array+0x38>)
 8000c8a:	4c0d      	ldr	r4, [pc, #52]	; (8000cc0 <__libc_init_array+0x3c>)
 8000c8c:	1ba4      	subs	r4, r4, r6
 8000c8e:	10a4      	asrs	r4, r4, #2
 8000c90:	42a5      	cmp	r5, r4
 8000c92:	d109      	bne.n	8000ca8 <__libc_init_array+0x24>
 8000c94:	f000 f81a 	bl	8000ccc <_init>
 8000c98:	2500      	movs	r5, #0
 8000c9a:	4e0a      	ldr	r6, [pc, #40]	; (8000cc4 <__libc_init_array+0x40>)
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	; (8000cc8 <__libc_init_array+0x44>)
 8000c9e:	1ba4      	subs	r4, r4, r6
 8000ca0:	10a4      	asrs	r4, r4, #2
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d105      	bne.n	8000cb2 <__libc_init_array+0x2e>
 8000ca6:	bd70      	pop	{r4, r5, r6, pc}
 8000ca8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cac:	4798      	blx	r3
 8000cae:	3501      	adds	r5, #1
 8000cb0:	e7ee      	b.n	8000c90 <__libc_init_array+0xc>
 8000cb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cb6:	4798      	blx	r3
 8000cb8:	3501      	adds	r5, #1
 8000cba:	e7f2      	b.n	8000ca2 <__libc_init_array+0x1e>
 8000cbc:	08000d0c 	.word	0x08000d0c
 8000cc0:	08000d0c 	.word	0x08000d0c
 8000cc4:	08000d0c 	.word	0x08000d0c
 8000cc8:	08000d10 	.word	0x08000d10

08000ccc <_init>:
 8000ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cce:	bf00      	nop
 8000cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cd2:	bc08      	pop	{r3}
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	4770      	bx	lr

08000cd8 <_fini>:
 8000cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cda:	bf00      	nop
 8000cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cde:	bc08      	pop	{r3}
 8000ce0:	469e      	mov	lr, r3
 8000ce2:	4770      	bx	lr
